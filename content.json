{"pages":[{"title":"","text":"I N F I N I T Y Of course this page is well found. But I still think you did something wrong. Check your link carefully and make sure that it is correct. Return home or try the search bar below.","link":"/404.html"},{"title":"","text":"We are here to help you. Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Multipurpose Template Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Well Documented Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Responsive Design Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. We're committed to our process. Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste. Goal definition Lorem ipsum dolor sit amet sit consectetur adipisicing eiusmod tempor. Analyse Lorem ipsum dolor sit amet sit consectetur adipisicing eiusmod tempor. Implementation Lorem ipsum dolor sit amet sit consectetur adipisicing eiusmod tempor. Recent Work Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde voluptatem. Sed unde omnis iste natus error sit voluptatem. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Amazing Project Agenda corp. Multipurpose Documented Responsive Clean & Fresh Raw denim you probably haven't heard of them jean shorts Austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica. Cosby sweater eu banh mi, qui irure terry richardson ex squid Aliquip placeat salvia cillum iphone. Read more Food truck fixie locavore, accusamus mcsweeney's marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee. Qui photo booth letterpress, commodo enim craft beer mlkshk aliquip jean shorts ullamco ad vinyl cillum PBR. Homo nostrud organic, assumenda labore aesthetic magna delectus mollit. Keytar helvetica VHS salvia.. Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney's organic lomo retro fanny pack lo-fi farm-to-table readymade. Messenger bag gentrify pitchfork tattooed craft beer, iphone skateboard locavore carles etsy salvia banksy hoodie helvetica. DIY synth PBR banksy irony. Leggings gentrify squid 8-bit cred pitchfork. Williamsburg banh mi whatever gluten-free, carles pitchfork biodiesel fixie etsy retro mlkshk vice blog. Scenester cred you probably haven't heard of them, vinyl craft beer blog stumptown. Pitchfork sustainable tofu synth chambray yr. Trust fund seitan letterpress, keytar raw denim keffiyeh etsy art party before they sold out master cleanse gluten-free squid scenester freegan cosby sweater. Fanny pack portland seitan DIY, art party locavore wolf cliche high life echo park Austin. Cred vinyl keffiyeh DIY salvia PBR, banh mi before they sold out farm-to-table VHS viral locavore cosby sweater. Lomo wolf viral, mustache readymade thundercats keffiyeh craft beer marfa ethical. Wolf salvia freegan, sartorial keffiyeh echo park vegan. Denim you probably haven't heard of. Lorem ipsum dolor met consectetur adipisicing sit amet, consectetur adipisicing elit, of them jean shorts sed magna aliqua. Lorem ipsum dolor met. Lina Mars Commercial Director Raw denim you Mustache cliche tempor, williamsburg carles vegan helvetica probably haven't heard of them jean shorts austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica. Kate Ford Commercial Director Reprehenderit butcher stache cliche tempor, williamsburg carles vegan helvetica.retro keffiyeh dreamcatcher synth. Cosby sweater eu banh mi, qui irure terry richardson ex squid Aliquip placeat salvia cillum iphone. Jake Witson Commercial Director Metronic - The Most Complete &amp; Popular Admin &amp; Frontend Theme Preview Admin Our Clients Lorem dipsum folor margade sitede lametep eiusmod psumquis dolore.","link":"/index.html"},{"title":"Categories","text":"","link":"/categories/index.html"},{"title":"about","text":"xrdrsp（04-21-2007），是就读于宁波市宋诏桥中学的初二学生。 Honours | 所获奖项： CCF CSP-J 2019 四等奖 CCF CSP-S 2019 四等奖 Contact Me | 联系方式： 名称 账号 备注 Email (Outlook) xrdrsp - Email (Gmail) xrdrsp - Telegram xrdrsp - FaceBook xrdrsp - Instagram xrdrsp - Twitter xrdrsp Currently Suspended 目前正被冻结 GitHub xrdrsp - QQ 2041375993 - Copyright Notice | 声明 All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally. 这个博客下的所有文章以 BY-NC-SA 4.0 协议授权，除非特殊声明。","link":"/about/index.html"},{"title":"Discussion","text":"You can leave replys and leave comments here. [EMERGENCY NOTICE]\\color{red}\\text{[EMERGENCY NOTICE]}[EMERGENCY NOTICE] Recently, some visitors commented with nicknames that are too long. They are harmful to the page, and will make the page slow. As a result, I have deleted all the comments here. Please, do not use long nicknames. Thank you for your co-operation. Discuss Board Rules: Do not send too many useless messages. Do not leave harmful comments or nicknames. Do not leave comments in religions. Updating…","link":"/discussion/index.html"},{"title":"Login","text":"Email * Password * Forget Password? Login or login using: Important Information Duis autem vel eum iriure at dolor vulputate velit esse vel molestie at dolore. More details","link":"/login/index.html"},{"title":"Unthique","text":"This is the page for the Euntique. The Dictionary Unr","link":"/eunthique/index.html"},{"title":"Links","text":"Dovuq","link":"/links/index.html"},{"title":"Projects","text":"All UI Design Web Development Photography Wordpress and Logo Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back Cascusamus et iusto odio At vero eos et accusamus et iusto odio digniss imos duc sasdimus qui sint blanditiis prae sentium voluptatum deleniti atque corrupti quos dolores. Project Name Lorem ipsum dolor sit amet, dolore eiusmod quis tempor incididunt ut et dolore Ut veniam unde nostrudlaboris. Sed unde omnis iste natus error sit voluptatem. Lorem ipsum dolor sit amet, consectetuer adipiscing tempor Adipiscing Get it FREE HTML5/CSS3 Web Deisgn Web Development Shoping Cart Free Storage Cloud Hosting Free Support Awesome UI Visit Project Back","link":"/projects/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"},{"title":"Unthique","text":"Unr : Usd 1 2 Sep 2019 11.03 Oct 2019 11.09 Nov 2019 11.20 Dec 2019 11.96 Jan 2020 11.98 Feb 2020 12.03 Mar 2020 12.12 Apr 2020 12.16 May 2020 11.99 Jun 2020 11.93 Jul 2020 12.00","link":"/eunthique/unr/index.html"},{"title":"Dictionary","text":"The dictionary of Eunthique Language. Noun Plural: +‘un’ Adjective/Adverb: +‘ich’ Ownership: +‘ect’ Verb Verb Tenses Present Simple Present Continuous: +‘eis’ Present Perfect&quot; +‘ust’ Present Continuous Perfect: +‘eisust’ Simple past: +‘entiv’ Past Continuous: +‘eneis’ Past Perfect: +‘enust’ Past Continuous Perfect: +‘eneisust’ Simple Future: +‘erssiv’ Future Continuous: +‘erseis’ Future Perfect: +‘ersust’ Future Continuous Perfect: +‘erseisust’ (The rest of verb tenses (20 items) will not be witten here, due to they’re seldom used.) Possive: +‘çraint’ Adjective / Adverb Comparative: +‘ern’ Superlative: +‘erst’ Adjective -&gt; Adverb: +‘iv’ Adverb -&gt; Adjective: +‘ij’ A Abuntsprund conj. &amp; adv. for the reason that; because: Ich çrainentiv dec, abuntsprund Tiijest zaidentiv pos Ichrum post. agkeit num. 1 000 000 B biltrumhaust noun. a structure such a house or school that has a roof and walls; (high) building: scholistantich Biltrmhaust C çrain verb the action of doing sth D dast det. that dastun det. those deh det. this dehun det. these deque num. 10 do num. 2 E ein num. 1 F fqvrpe interj. &amp; adv. (Informal) Used to express exclamation; extremely: Dast Biltrumhaust aussen fqvrpe hairiis Ihr siedentiv! G H I Ihr pron. used as the subject of a verb when the speaker or writer is referring to himself/herself: Ihr siedentiv pos jn, abuntsprund tras dec. J jet num. 7 K L M N neun num. 9 null num. 0 O oct num. 8 P Q R S T tri num. 3 tungkeit num. 1 000 U undrid num. 100 unk num. 5 V vietnum num. 1 000 000 000 vod num. 4 vunf num. 6 W X Y Z","link":"/eunthique/dictionary/index.html"}],"posts":[{"title":"[Solution] Codeforces 1330A","text":"由于在每次判断中不需要知道具体的名次，而只需要知道 Dreamoon 有没有达到过这个名次。所以 sort() 是不必要的。用 aia_iai​ 存下是否达到过 iii 这个名次，然后按顺序判断即可。这是符合要求的 下面是 AC\\text{AC}AC 代码，具体见注释。 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 110;int a[2 * N]; // 开二倍int main(){ int t; cin &gt;&gt; t; while (t--) { memset(a, 0, sizeof(a)); int n, x; cin &gt;&gt; n &gt;&gt; x; // 读入 int k; // 比赛名次 int cnt = 0; // 加数字次数 for (int i = 0; i &lt; n; i++) { // 读入 cin &gt;&gt; k; a[k] = k; } for (int i = 1; i &lt;= 2 * N; i++) { // 统计 if (!a[i]) { // 若第 i 名没有出现过，就把它补上，并更新计数器 cnt++; } if (cnt == x + 1) { // 判断补的次数是否超过限制 cout &lt;&lt; endl &lt;&lt; i - 1 &lt;&lt; endl &lt;&lt; endl; // 输出 break; } } } return 0;} Wish you high rating.","link":"/2020/04/06/codeforces-1330a/"},{"title":"Mathematics Tools","text":"函数求导工具 函数输入框: 自变量: 阶数: 0 1 2 3 4 5 6 7 8 9 10 不定积分计算器 请输入你需要积分的函数表达式: 自变量: 定积分计算器 请输入你需要积分的函数表达式: 自变量: 从: 到: 极限计算器 请输入一个函数并计算极限: 极限变量: x趋向于: 极限类型 双侧极限 右侧极限 左侧极限 分数计算器 输入一个分数表达式: 方程求解 输入逗号以分隔多个方程: 表达式化简 输入一个表达式来简化: 因式分解工具 请输入您需要分解因式的表达式：: 反函数计算器 输入函数来计算其反函数: 表达式计算器 输入要计算的表达式: 矩阵计算器 输入矩阵 A: 矩阵的行列式 转置矩阵 矩阵迹 矩阵的秩 逆矩阵 特征值 下三角矩阵 A2 矩阵运算 输入矩阵 A:输入矩阵 B: 加法 减法 乘法 质数发生器和校验器 输入一个自然数，并选择相应的功能: 检验是否为质数 下一个质数 上一个质数 整数分解工具 请输入您需要分解的整数: 斐波那契数计算工具 请输入一个非负整数: 伯努利数发生器 请输入一个非负整数: 欧拉数计算工具 请输入一个非负整数: 阶乘计算器 请输入一个非负整数: 组合数计算器 组合数计算方法，从N项中选出M项. 是否具有顺序? 是 否 元素是否可以选择一次以上? 是 否 N = M = 统计计算器 输入一个空格，逗号或新行分隔的数字: 平均数 中位数 调和平均数 几何平均数 最小 最大 范围 方差 更正方差 标准偏差 更正的标准偏差 变异系数 平均偏差 中位数偏差 偏度 函数图像绘制工具 函数输入框: X 坐标, 从: 到: Y 坐标, 从: 到:","link":"/2020/03/09/Mathematics-Tools/"},{"title":"Mathematics","text":"高次多项式因式分解 高次方程 π≈3123\\pi \\approx 3 \\\\ 123π≈3123 x2x^2x2 ax2+bx+c=0(a≠0),x=−b±b2−4ac2aax^2+bx+c=0(a\\neq0),x=\\dfrac{-b\\pm\\sqrt{b^2-4ac}}{2a}ax2+bx+c=0(a​=0),x=2a−b±b2−4ac​​ x2+y2=r2(r&gt;0)x^2+y^2=r^2(r&gt;0)x2+y2=r2(r&gt;0) x2a2+y2b2=1(a≥b,c=a2−b2)\\dfrac{x^2}{a^2}+\\dfrac{y^2}{b^2}=1(a\\geq b,c=\\sqrt{a^2-b^2})a2x2​+b2y2​=1(a≥b,c=a2−b2​) x2a2−y2b2=1(a&lt;b,c=b2−a2)\\dfrac{x^2}{a^2}-\\dfrac{y^2}{b^2}=1(a&lt;b,c=\\sqrt{b^2-a^2})a2x2​−b2y2​=1(a&lt;b,c=b2−a2​) y2=2px(p&gt;0)y^2=2px(p&gt;0)y2=2px(p&gt;0) (a)2=a2±2ab+b2(a\\pmb)^2=a^2\\pm2ab+b^2(a)​)​​)2=a2±2ab+b2 (a+b)(a−b)=a2−b2(a+b)(a-b)=a^2-b^2(a+b)(a−b)=a2−b2 (a+b+c)2=a2+b2+c2+2ab+2bc+2ac(a+b+c)^2=a^2+b^2+c^2+2ab+2bc+2ac(a+b+c)2=a2+b2+c2+2ab+2bc+2ac a2+b2≥2aba^2+b^2\\geq 2aba2+b2≥2ab a+b2≥ab(a≥0,b≥0)\\dfrac{a+b}2\\geq\\sqrt{ab}(a\\geq0,b\\geq0)2a+b​≥ab​(a≥0,b≥0) x3x^3x3 a3+b3+c3−3abc=(a+b+c)(a2+b2+c2−ab−bc−ac)=(a+b+c)[(a−b)2+(b−c)2+(c−a)2]a^3+b^3+c^3-3abc=(a+b+c)(a^2+b^2+c^2-ab-bc-ac)=(a+b+c)[(a-b)^2+(b-c)^2+(c-a)^2]a3+b3+c3−3abc=(a+b+c)(a2+b2+c2−ab−bc−ac)=(a+b+c)[(a−b)2+(b−c)2+(c−a)2] (a±b)3=a3±3a2b+3ab2±b3(a\\pm b)^3=a^3\\pm3a^2b+3ab^2\\pm b^3(a±b)3=a3±3a2b+3ab2±b3 a3±b3=(a±b)(a2∓ab+b2)a^3\\pm b^3=(a\\pm b)(a^2\\mp ab+b^2)a3±b3=(a±b)(a2∓ab+b2) xnx^nxn an−bn=(a−b)(an−1+an−2b+...+an−kbk+...+bn−1)a^n-b^n=(a-b)(a^{n-1}+a^{n-2}b+...+a^{n-k}b^k+...+b^{n-1})an−bn=(a−b)(an−1+an−2b+...+an−kbk+...+bn−1) a2n+1+b2n+1=(a+b)[a2n−a2n−1b+...+(−1)kan−kbk+...+b2n]a^{2n+1}+b^{2n+1}=(a+b)[a^{2n}-a^{2n-1}b+...+(-1)^ka^{n-k}b^k+...+b^{2n}]a2n+1+b2n+1=(a+b)[a2n−a2n−1b+...+(−1)kan−kbk+...+b2n] (a+b)n=Cn0an+Cn1an−1b+...+Cnkan−kbk+...+Cnnbn(a+b)^n=C_n^0a^n+C_n^1a^{n-1}b+...+C_n^ka^{n-k}b^k+...+C_n^nb^n(a+b)n=Cn0​an+Cn1​an−1b+...+Cnk​an−kbk+...+Cnn​bn (a−b)n=Cn0an−Cn1an−1b+...+(−1)kCnkan−kbk+...+(−1)nCnnbn(a-b)^n=C_n^0a^n-C_n^1a^{n-1}b+...+(-1)^kC_n^ka^{n-k}b^k+...+(-1)^nC_n^nb^n(a−b)n=Cn0​an−Cn1​an−1b+...+(−1)kCnk​an−kbk+...+(−1)nCnn​bn 三角函数 sin⁡acsc⁡a=1\\sin a\\csc a=1sinacsca=1 cos⁡asec⁡a=1\\cos a\\sec a=1cosaseca=1 tan⁡acot⁡a=1\\tan a\\cot a=1tanacota=1 sin⁡acos⁡a=tan⁡a\\dfrac{\\sin a}{\\cos a}=\\tan acosasina​=tana sin⁡2a+cos⁡2a=1\\sin^2a+\\cos^2a=1sin2a+cos2a=1 tan⁡2a+1=sec⁡2a\\tan^2a+1=\\sec^2atan2a+1=sec2a cot⁡2a+1=csc⁡2a\\cot^2a+1=\\csc^2acot2a+1=csc2a cos⁡(a±b)=cos⁡acos⁡b∓sin⁡asin⁡b\\cos(a\\pm b)=\\cos a\\cos b\\mp\\sin a\\sin bcos(a±b)=cosacosb∓sinasinb sin⁡(a±b)=sin⁡acos⁡b±cos⁡asin⁡b\\sin(a\\pm b)=\\sin a\\cos b\\pm\\cos a\\sin bsin(a±b)=sinacosb±cosasinb tan⁡(a±b)=tan⁡a±tan⁡b1∓tan⁡atan⁡b\\tan(a\\pm b)=\\dfrac{\\tan a\\pm\\tan b}{1\\mp\\tan a\\tan b}tan(a±b)=1∓tanatanbtana±tanb​ cos⁡2a=cos⁡2a−sin⁡2a=1−2sin⁡2a=2cos⁡2a−1\\cos2a=\\cos^2a-\\sin^2a=1-2\\sin^2a=2\\cos^2a-1cos2a=cos2a−sin2a=1−2sin2a=2cos2a−1 sin⁡2a=2sin⁡acos⁡a\\sin2a=2\\sin a\\cos asin2a=2sinacosa tan⁡2a=2tan⁡a1−tan⁡2a\\tan2a=\\dfrac{2\\tan a}{1-\\tan^2a}tan2a=1−tan2a2tana​ sin⁡a+sin⁡b=2sin⁡a+b2cos⁡a−b2\\sin a+\\sin b=2\\sin\\dfrac{a+b}2\\cos\\dfrac{a-b}2sina+sinb=2sin2a+b​cos2a−b​ sin⁡a−sin⁡b=2cos⁡a+b2sin⁡a−b2\\sin a-\\sin b=2\\cos\\dfrac{a+b}2\\sin\\dfrac{a-b}2sina−sinb=2cos2a+b​sin2a−b​ cos⁡a+cos⁡b=2cos⁡a+b2cos⁡a−b2\\cos a+\\cos b=2\\cos\\dfrac{a+b}2\\cos\\dfrac{a-b}2cosa+cosb=2cos2a+b​cos2a−b​ cos⁡a−cos⁡b=−2sin⁡a+b2sin⁡a−b2\\cos a-\\cos b=-2\\sin\\dfrac{a+b}2\\sin\\dfrac{a-b}2cosa−cosb=−2sin2a+b​sin2a−b​ sin⁡acos⁡b=12[sin⁡(a+b)+sin⁡(a−b)]\\sin a\\cos b=\\dfrac12[\\sin(a+b)+\\sin(a-b)]sinacosb=21​[sin(a+b)+sin(a−b)] cos⁡acos⁡b=12[cos⁡(a+b)+cos⁡(a−b)]\\cos a\\cos b=\\dfrac12[\\cos(a+b)+\\cos(a-b)]cosacosb=21​[cos(a+b)+cos(a−b)] sin⁡asin⁡b=12[cos⁡(a+b)−cos⁡(a−b)]\\sin a\\sin b=\\dfrac12[\\cos(a+b)-\\cos(a-b)]sinasinb=21​[cos(a+b)−cos(a−b)] sin⁡3a=3sin⁡a−4sin⁡3a\\sin3a=3\\sin a-4\\sin^3asin3a=3sina−4sin3a cos⁡3a=4cos⁡3a−3cos⁡a\\cos3a=4\\cos^3a-3\\cos acos3a=4cos3a−3cosa tan⁡3a=3tan⁡a−tan⁡3a1−tan⁡2a\\tan3a=\\dfrac{3\\tan a-\\tan^3a}{1-\\tan^2a}tan3a=1−tan2a3tana−tan3a​ asin⁡A=bsin⁡B=csin⁡C=2R\\dfrac a{\\sin A}=\\dfrac b{\\sin B}=\\dfrac c{\\sin C}=2RsinAa​=sinBb​=sinCc​=2R c2=a2+b2−2abcos⁡Cc^2=a^2+b^2-2ab\\cos Cc2=a2+b2−2abcosC 极限及微积分 lim⁡x→0sin⁡xx=1\\lim \\limits_{x \\rightarrow0} \\dfrac{\\sin x}x=1x→0lim​xsinx​=1 lim⁡x→∞(1+1x)x=e\\lim \\limits_{x \\rightarrow \\infty}(1+ \\dfrac 1x)^x=ex→∞lim​(1+x1​)x=e lim⁡x→x0(f(x)±g(x))=lim⁡x→x0f(x)±lim⁡x→x0g(x)\\lim \\limits_{x \\rightarrow x_0}(f(x) \\pm g(x))= \\lim \\limits_{x \\rightarrow x_0}f(x) \\pm \\lim \\limits_{x \\rightarrow x_0}g(x)x→x0​lim​(f(x)±g(x))=x→x0​lim​f(x)±x→x0​lim​g(x) lim⁡x→x0(f(x)g(x))=lim⁡x→x0f(x)×lim⁡x→x0g(x)\\lim \\limits_{x \\rightarrow x_0}(f(x)g(x))=\\lim \\limits_{x \\rightarrow x_0}f(x)\\times \\lim \\limits_{x \\rightarrow x_0}g(x)x→x0​lim​(f(x)g(x))=x→x0​lim​f(x)×x→x0​lim​g(x) lim⁡x→x0f(x)g(x)=lim⁡x→x0f(x)lim⁡x→x0g(x)(lim⁡x→x0g(x)≠0)\\lim \\limits_{x \\rightarrow x_0} \\dfrac{f(x)}{g(x)}=\\dfrac{\\lim \\limits_{x \\rightarrow x_0}f(x)}{\\lim \\limits_{x \\rightarrow x_0}g(x)}(\\lim \\limits_{x \\rightarrow x_0}g(x)\\neq0)x→x0​lim​g(x)f(x)​=x→x0​lim​g(x)x→x0​lim​f(x)​(x→x0​lim​g(x)​=0) lim⁡x→x0f(x)n=[lim⁡x→x0f(x)]n\\lim \\limits_{x \\rightarrow x_0}f(x)^n=[\\lim \\limits_{x \\rightarrow x_0}f(x)]^nx→x0​lim​f(x)n=[x→x0​lim​f(x)]n a′=0a'=0a′=0 (xa)′=axa−1(a≠0)(x^a)'=ax^{a-1}(a\\neq0)(xa)′=axa−1(a​=0) (ax)′=axln⁡a(a^x)'=a^x\\ln a(ax)′=axlna (ex)′=ex(e^x)'=e^x(ex)′=ex (log⁡ax)′=1xlog⁡ae(\\log_ax)'=\\dfrac1x\\log_ae(loga​x)′=x1​loga​e (ln⁡x)′=1x(\\ln x)'=\\dfrac1x(lnx)′=x1​ (sin⁡x)′=cos⁡x(\\sin x)'=\\cos x(sinx)′=cosx (cos⁡x)′=−sin⁡x(\\cos x)'=-\\sin x(cosx)′=−sinx (tan⁡x)′=sec⁡2x(\\tan x)'=\\sec^2x(tanx)′=sec2x (cot⁡x)′=−csc⁡2x(\\cot x)'=-\\csc^2x(cotx)′=−csc2x (sec⁡x)′=sec⁡xtan⁡x(\\sec x)'=\\sec x\\tan x(secx)′=secxtanx (csc⁡x)′=−csc⁡xcot⁡x(\\csc x)'=-\\csc x\\cot x(cscx)′=−cscxcotx (arcsin⁡x)′=11−x2(\\arcsin x)'=\\dfrac1{\\sqrt{1-x^2}}(arcsinx)′=1−x2​1​ (arccos⁡x)′=−11−x2(\\arccos x)'=-\\dfrac1{\\sqrt{1-x^2}}(arccosx)′=−1−x2​1​ (arctan⁡x)′=11+x2(\\arctan x)'=\\dfrac1{1+x^2}(arctanx)′=1+x21​ (arccot⁡x)′=−11−x2(\\operatorname{arccot}x)'=-\\dfrac1{1-x^2}(arccotx)′=−1−x21​ (f(x)±g(x))′=f′(x)±g′(x)(f(x)\\pm g(x))'=f'(x)\\pm g'(x)(f(x)±g(x))′=f′(x)±g′(x) (f(x)g(x))′=f′(x)g(x)+f(x)g′(x)(f(x)g(x))'=f'(x)g(x)+f(x)g'(x)(f(x)g(x))′=f′(x)g(x)+f(x)g′(x) (f(x)g(x))′=f′(x)g(x)−f(x)g′(x)g(x)2(\\dfrac{f(x)}{g(x)})'=\\dfrac{f'(x)g(x)-f(x)g'(x)}{g(x)^2}(g(x)f(x)​)′=g(x)2f′(x)g(x)−f(x)g′(x)​ ∫0dx=C\\int0dx=C∫0dx=C ∫adx=ax+C\\int adx=ax+C∫adx=ax+C ∫xadx=1a+1xa+1+C(a≠−1)\\int x^adx=\\dfrac1{a+1}x^{a+1}+C(a\\neq-1)∫xadx=a+11​xa+1+C(a​=−1) ∫axdx=axlog⁡ae+C\\int a^xdx=a^x\\log_ae+C∫axdx=axloga​e+C ∫exdx=ex+C\\int e^xdx=e^x+C∫exdx=ex+C ∫1xdx=ln⁡∣x∣+C\\int\\dfrac1xdx=\\ln |x|+C∫x1​dx=ln∣x∣+C ∫sin⁡xdx=−cos⁡x+C\\int\\sin xdx=-\\cos x+C∫sinxdx=−cosx+C ∫cos⁡xdx=sin⁡x+C\\int\\cos xdx=\\sin x+C∫cosxdx=sinx+C ∫(f(x)±g(x))dx=∫f(x)dx±∫g(x)dx\\int(f(x)\\pm g(x))dx=\\int f(x)dx\\pm\\int g(x)dx∫(f(x)±g(x))dx=∫f(x)dx±∫g(x)dx 级数求和 ∑n=1xn=12n(n+1)\\sum\\limits_{n=1}^xn=\\dfrac12n(n+1)n=1∑x​n=21​n(n+1) ∑n=1xn2=16n(n+1)(2n+1)\\sum\\limits_{n=1}^xn^2=\\dfrac16n(n+1)(2n+1)n=1∑x​n2=61​n(n+1)(2n+1) ∑n=1xn3=14n2(n+1)2\\sum\\limits_{n=1}^xn^3=\\dfrac14n^2(n+1)^2n=1∑x​n3=41​n2(n+1)2 ∑n=0xan=ax+1−1a−1\\sum\\limits_{n=0}^xa^n=\\dfrac{a^{x+1}-1}{a-1}n=0∑x​an=a−1ax+1−1​ ∑n=0x2n=2x+1−1\\sum\\limits_{n=0}^x2^n=2^{x+1}-1n=0∑x​2n=2x+1−1 ∑n=1∞1an=1a−1(∣a∣&gt;1)\\sum\\limits_{n=1}^\\infty\\dfrac1{a^n}=\\dfrac1{a-1}(|a|&gt;1)n=1∑∞​an1​=a−11​(∣a∣&gt;1) ∑n=1∞12n=1\\sum\\limits_{n=1}^\\infty\\dfrac1{2^n}=1n=1∑∞​2n1​=1 ∑n=1∞1n2=π26\\sum\\limits_{n=1}^\\infty\\dfrac1{n^2}=\\dfrac{\\pi^2}6n=1∑∞​n21​=6π2​ ∑n=1∞1n4=π490\\sum\\limits_{n=1}^\\infty\\dfrac1{n^4}=\\dfrac{\\pi^4}{90}n=1∑∞​n41​=90π4​ ∑n=0∞ann!=ea\\sum\\limits_{n=0}^\\infty\\dfrac{a^n}{n!}=e^an=0∑∞​n!an​=ea ∑n=0∞(−1)na2n+1(2n+1)!=sin⁡a\\sum\\limits_{n=0}^\\infty\\dfrac{(-1)^na^{2n+1}}{(2n+1)!}=\\sin an=0∑∞​(2n+1)!(−1)na2n+1​=sina ∑n=0∞(−1)na2n(2n)!=cos⁡a\\sum\\limits_{n=0}^\\infty\\dfrac{(-1)^na^{2n}}{(2n)!}=\\cos an=0∑∞​(2n)!(−1)na2n​=cosa 平面图形的周长、面积 图形 周长 面积 长方形 2(a+b)2(a+b)2(a+b) ababab 正方形 4a4a4a a2a^2a2 圆 2πr=τr2\\pi r=\\tau r2πr=τr πr2=12τr2\\pi r^2=\\dfrac12\\tau r^2πr2=21​τr2 三角形 a+b+ca+b+ca+b+c 12aha=12absin⁡c=p(p−a)(p−b)(p−c)=12a2b2−(a2+b2−c22)2\\dfrac12ah_a=\\dfrac12ab\\sin c=\\sqrt{p(p-a)(p-b)(p-c)}=\\dfrac12\\sqrt{a^2b^2-\\left(\\dfrac{a^2+b^2-c^2}2\\right)^2}21​aha​=21​absinc=p(p−a)(p−b)(p−c)​=21​a2b2−(2a2+b2−c2​)2​ 平行四边形 ahahah 梯形 12(a+b)h\\dfrac12(a+b)h21​(a+b)h 正三角形 3a3a3a 34a2\\dfrac{\\sqrt3}4a^243​​a2 正五边形 5a5a5a 25+1054a2\\dfrac{\\sqrt{25+10\\sqrt5}}4a^2425+105​​​a2 正nnn边形 nanana ncot⁡(180n)4a2\\dfrac{n\\cot(\\dfrac{180}n)}4a^24ncot(n180​)​a2 立体图形的表面积、体积 图形 表面积 体积 长方体 2(ab+ah+bh)2(ab+ah+bh)2(ab+ah+bh) abhabhabh 立方体 6a26a^26a2 a3a^3a3 柱体 ShShSh 锥体 13Sh\\dfrac13Sh31​Sh 台体 13(S+Ss+s)h\\dfrac13(S+\\sqrt{Ss}+s)h31​(S+Ss​+s)h 圆柱 2πr(r+h)2\\pi r(r+h)2πr(r+h) πr2h\\pi r^2hπr2h 圆锥 πr(r+l)\\pi r(r+l)πr(r+l) 13πr2h\\dfrac13\\pi r^2h31​πr2h 圆台 π(R2+r2+Rl+rl)\\pi(R^2+r^2+Rl+rl)π(R2+r2+Rl+rl) 13π(R2+Rr+r2)h\\dfrac13\\pi(R^2+Rr+r^2)h31​π(R2+Rr+r2)h 球 4πr24\\pi r^24πr2 43πr3\\dfrac43\\pi r^334​πr3 222的幂表 nnn 2n2^n2n 0 1 1 2 2 4 3 8 4 16 5 32 6 64 7 128 8 256 9 512 10 1024 11 2048 12 4096 13 8192 14 16384 15 32768 16 65536 17 131072 18 262144 19 524288 20 1048576 21 2097152 22 4184304 23 8388638 24 16777216 25 33554432 26 67108864 27 134217728 28 268435456 29 536870912 30 1073741824 31 2147483648 32 4294967296 33 8589934592 34 17179869184 35 34359738368 36 68719476736 37 137438953472 38 274877906944 39 549755813888 40 1099511627776 41 2199023255552 42 4398046511104 43 8796093022208 44 17592186044416 45 35184372088832 46 70368744177664 47 140737488355328 48 281474976710656 49 562949953421312 50 1125899906842624 51 2251799813685248 52 4503599627370496 53 9007199254740992 54 18014398509481984 55 36028797018963968 56 72057594037927936 57 144115188075855872 58 288230376151711744 59 576460752303423488 60 1152921504606846976 61 2305843009213693952 62 4611686018427387904 63 9223372036854775808 64 18446744073709551616 333的幂表 nnn 3n3^n3n 0 1 1 3 2 9 3 27 4 81 5 243 6 729 7 2187 8 6561 9 19683 10 59049 555的幂表 nnn 5n5^n5n 0 1 1 5 2 25 3 125 4 625 5 3125 6 15625 7 78125 8 390625 9 1953125 10 9765625 常数 π\\piπ π≈3.1415926535 8979323846 2643383279 5028841971 69399375105820974944 5923078164 0628620899 8628034825 34211706798214808651 3282306647 0938446095 5058223172 53594081284811174502 8410270193 8521105559 6446229489 54930381964428810975 6659334461 2847564823 3786783165 27120190914564856692 3460348610 4543266482 1339360726 02491412737245870066 0631558817 4881520920 9628292540 91715364367892590360 0113305305 4882046652 1384146951 94151160943305727036 5759591953 0921861173 8193261179 31051185480744623799 6274956735 1885752724 8912279381 83011949129833673362 4406566430 8602139494 6395224737 19070217986094370277 0539217176 2931767523 8467481846 76694051320005681271 4526356082 7785771342 7577896091 73637178721468440901 2249534301 4654958537 1050792279 68925892354201995611 2129021960 8640344181 5981362977 47713099605187072113 4999999837 2978049951 0597317328 16096318595024459455 3469083026 4252230825 3344685035 26193118817101000313 7838752886 5875332083 8142061717 76691473035982534904 2875546873 1159562863 8823537875 93751957781857780532 1712268066 1300192787 6611195909 2164201989\\pi \\approx 3. \\\\ 1415926535 \\ 8979323846 \\ 2643383279 \\ 5028841971 \\ 6939937510\\\\ 5820974944 \\ 5923078164 \\ 0628620899 \\ 8628034825 \\ 3421170679\\\\ 8214808651 \\ 3282306647 \\ 0938446095 \\ 5058223172 \\ 5359408128\\\\ 4811174502 \\ 8410270193 \\ 8521105559 \\ 6446229489 \\ 5493038196\\\\ 4428810975 \\ 6659334461 \\ 2847564823 \\ 3786783165 \\ 2712019091\\\\ 4564856692 \\ 3460348610 \\ 4543266482 \\ 1339360726 \\ 0249141273\\\\ 7245870066 \\ 0631558817 \\ 4881520920 \\ 9628292540 \\ 9171536436\\\\ 7892590360 \\ 0113305305 \\ 4882046652 \\ 1384146951 \\ 9415116094\\\\ 3305727036 \\ 5759591953 \\ 0921861173 \\ 8193261179 \\ 3105118548\\\\ 0744623799 \\ 6274956735 \\ 1885752724 \\ 8912279381 \\ 8301194912\\\\ 9833673362 \\ 4406566430 \\ 8602139494 \\ 6395224737 \\ 1907021798\\\\ 6094370277 \\ 0539217176 \\ 2931767523 \\ 8467481846 \\ 7669405132\\\\ 0005681271 \\ 4526356082 \\ 7785771342 \\ 7577896091 \\ 7363717872\\\\ 1468440901 \\ 2249534301 \\ 4654958537 \\ 1050792279 \\ 6892589235\\\\ 4201995611 \\ 2129021960 \\ 8640344181 \\ 5981362977 \\ 4771309960\\\\ 5187072113 \\ 4999999837 \\ 2978049951 \\ 0597317328 \\ 1609631859\\\\ 5024459455 \\ 3469083026 \\ 4252230825 \\ 3344685035 \\ 2619311881\\\\ 7101000313 \\ 7838752886 \\ 5875332083 \\ 8142061717 \\ 7669147303\\\\ 5982534904 \\ 2875546873 \\ 1159562863 \\ 8823537875 \\ 9375195778\\\\ 1857780532 \\ 1712268066 \\ 1300192787 \\ 6611195909 \\ 2164201989π≈3.1415926535 8979323846 2643383279 5028841971 69399375105820974944 5923078164 0628620899 8628034825 34211706798214808651 3282306647 0938446095 5058223172 53594081284811174502 8410270193 8521105559 6446229489 54930381964428810975 6659334461 2847564823 3786783165 27120190914564856692 3460348610 4543266482 1339360726 02491412737245870066 0631558817 4881520920 9628292540 91715364367892590360 0113305305 4882046652 1384146951 94151160943305727036 5759591953 0921861173 8193261179 31051185480744623799 6274956735 1885752724 8912279381 83011949129833673362 4406566430 8602139494 6395224737 19070217986094370277 0539217176 2931767523 8467481846 76694051320005681271 4526356082 7785771342 7577896091 73637178721468440901 2249534301 4654958537 1050792279 68925892354201995611 2129021960 8640344181 5981362977 47713099605187072113 4999999837 2978049951 0597317328 16096318595024459455 3469083026 4252230825 3344685035 26193118817101000313 7838752886 5875332083 8142061717 76691473035982534904 2875546873 1159562863 8823537875 93751957781857780532 1712268066 1300192787 6611195909 2164201989 τ\\tauτ τ≈6.2831853071 7958647692 5286766559 0057683943 38798750211641949889 1846156328 1257241799 7256069650 68423413596429617302 6564613294 1876892191 0116446345 07188162569622349005 6820540387 7042211119 2892458979 09860763928857621951 3318668922 5695129646 7573566330 54240381829129713384 6920697220 9086532964 2678721452 04982825474491740132 1263117634 9763041841 9256585081 83430728735785180720 0226610610 9764093304 2768293903 88302321886611454073 1519183906 1843722347 6386522358 62102370961489247599 2549913470 3771505449 7824558763 66023898259667346724 8813132861 7204278989 2790449474 38140435972188740554 1078434352 5863535047 6934963693 53388102640011362542 9052712165 5571542685 5155792183 47274357442936881802 4499068602 9309917074 2101584559 37851784708403991222 4258043921 7280688363 1962725954 95426199210374144226 9999999674 5956099902 1194634656 32192637190048918910 6938166052 8504461650 6689370070 52386237634202000627 5677505773 1750664167 6284123435 53382946071965069808 5751093746 2319125727 7647075751 87503915563715561064 3424536132 2600385575 3222391818 4328403978\\tau\\approx6.\\\\ 2831853071 \\ 7958647692 \\ 5286766559 \\ 0057683943 \\ 3879875021\\\\ 1641949889 \\ 1846156328 \\ 1257241799 \\ 7256069650 \\ 6842341359\\\\ 6429617302 \\ 6564613294 \\ 1876892191 \\ 0116446345 \\ 0718816256\\\\ 9622349005 \\ 6820540387 \\ 7042211119 \\ 2892458979 \\ 0986076392\\\\ 8857621951 \\ 3318668922 \\ 5695129646 \\ 7573566330 \\ 5424038182\\\\ 9129713384 \\ 6920697220 \\ 9086532964 \\ 2678721452 \\ 0498282547\\\\ 4491740132 \\ 1263117634 \\ 9763041841 \\ 9256585081 \\ 8343072873\\\\ 5785180720 \\ 0226610610 \\ 9764093304 \\ 2768293903 \\ 8830232188\\\\ 6611454073 \\ 1519183906 \\ 1843722347 \\ 6386522358 \\ 6210237096\\\\ 1489247599 \\ 2549913470 \\ 3771505449 \\ 7824558763 \\ 6602389825\\\\ 9667346724 \\ 8813132861 \\ 7204278989 \\ 2790449474 \\ 3814043597\\\\ 2188740554 \\ 1078434352 \\ 5863535047 \\ 6934963693 \\ 5338810264\\\\ 0011362542 \\ 9052712165 \\ 5571542685 \\ 5155792183 \\ 4727435744\\\\ 2936881802 \\ 4499068602 \\ 9309917074 \\ 2101584559 \\ 3785178470\\\\ 8403991222 \\ 4258043921 \\ 7280688363 \\ 1962725954 \\ 9542619921\\\\ 0374144226 \\ 9999999674 \\ 5956099902 \\ 1194634656 \\ 3219263719\\\\ 0048918910 \\ 6938166052 \\ 8504461650 \\ 6689370070 \\ 5238623763\\\\ 4202000627 \\ 5677505773 \\ 1750664167 \\ 6284123435 \\ 5338294607\\\\ 1965069808 \\ 5751093746 \\ 2319125727 \\ 7647075751 \\ 8750391556\\\\ 3715561064 \\ 3424536132 \\ 2600385575 \\ 3222391818 \\ 4328403978τ≈6.2831853071 7958647692 5286766559 0057683943 38798750211641949889 1846156328 1257241799 7256069650 68423413596429617302 6564613294 1876892191 0116446345 07188162569622349005 6820540387 7042211119 2892458979 09860763928857621951 3318668922 5695129646 7573566330 54240381829129713384 6920697220 9086532964 2678721452 04982825474491740132 1263117634 9763041841 9256585081 83430728735785180720 0226610610 9764093304 2768293903 88302321886611454073 1519183906 1843722347 6386522358 62102370961489247599 2549913470 3771505449 7824558763 66023898259667346724 8813132861 7204278989 2790449474 38140435972188740554 1078434352 5863535047 6934963693 53388102640011362542 9052712165 5571542685 5155792183 47274357442936881802 4499068602 9309917074 2101584559 37851784708403991222 4258043921 7280688363 1962725954 95426199210374144226 9999999674 5956099902 1194634656 32192637190048918910 6938166052 8504461650 6689370070 52386237634202000627 5677505773 1750664167 6284123435 53382946071965069808 5751093746 2319125727 7647075751 87503915563715561064 3424536132 2600385575 3222391818 4328403978 eee e≈2.7182818284 5904523536 0287471352 6624977572 47093699959574966967 6277240766 3035354759 4571382178 52516642742746639193 2003059921 8174135966 2904357290 03342952605956307381 3232862794 3490763233 8298807531 95251019011573834187 9307021540 8914993488 4167509244 76146066808226480016 8477411853 7423454424 3710753907 77449920695517027618 3860626133 1384583000 7520449338 26560297606737113200 7093287091 2744374704 7230696977 20931014169283681902 5515108657 4637721112 5238978442 50569536967707854499 6996794686 4454905987 9316368892 30098793127736178215 4249992295 7635148220 8269895193 66803318252886939849 6465105820 9392398294 8879332036 25094431173012381970 6841614039 7019837679 3206832823 76464804295311802328 7825098194 5581530175 6717361332 06981125099618188159 3041690351 5988885193 4580727386 67385894228792284998 9208680582 5749279610 4841984443 63463244968487560233 6248270419 7862320900 2160990235 30436994184914631409 3431738143 6405462531 5209618369 08887070167683964243 7814059271 4563549061 3031072085 10383750510115747704 1718986106 8739696552 1267154688 9570350354e\\approx2.\\\\ 7182818284 \\ 5904523536 \\ 0287471352 \\ 6624977572 \\ 4709369995\\\\ 9574966967 \\ 6277240766 \\ 3035354759 \\ 4571382178 \\ 5251664274\\\\ 2746639193 \\ 2003059921 \\ 8174135966 \\ 2904357290 \\ 0334295260\\\\ 5956307381 \\ 3232862794 \\ 3490763233 \\ 8298807531 \\ 9525101901\\\\ 1573834187 \\ 9307021540 \\ 8914993488 \\ 4167509244 \\ 7614606680\\\\ 8226480016 \\ 8477411853 \\ 7423454424 \\ 3710753907 \\ 7744992069\\\\ 5517027618 \\ 3860626133 \\ 1384583000 \\ 7520449338 \\ 2656029760\\\\ 6737113200 \\ 7093287091 \\ 2744374704 \\ 7230696977 \\ 2093101416\\\\ 9283681902 \\ 5515108657 \\ 4637721112 \\ 5238978442 \\ 5056953696\\\\ 7707854499 \\ 6996794686 \\ 4454905987 \\ 9316368892 \\ 3009879312\\\\ 7736178215 \\ 4249992295 \\ 7635148220 \\ 8269895193 \\ 6680331825\\\\ 2886939849 \\ 6465105820 \\ 9392398294 \\ 8879332036 \\ 2509443117\\\\ 3012381970 \\ 6841614039 \\ 7019837679 \\ 3206832823 \\ 7646480429\\\\ 5311802328 \\ 7825098194 \\ 5581530175 \\ 6717361332 \\ 0698112509\\\\ 9618188159 \\ 3041690351 \\ 5988885193 \\ 4580727386 \\ 6738589422\\\\ 8792284998 \\ 9208680582 \\ 5749279610 \\ 4841984443 \\ 6346324496\\\\ 8487560233 \\ 6248270419 \\ 7862320900 \\ 2160990235 \\ 3043699418\\\\ 4914631409 \\ 3431738143 \\ 6405462531 \\ 5209618369 \\ 0888707016\\\\ 7683964243 \\ 7814059271 \\ 4563549061 \\ 3031072085 \\ 1038375051\\\\ 0115747704 \\ 1718986106 \\ 8739696552 \\ 1267154688 \\ 9570350354e≈2.7182818284 5904523536 0287471352 6624977572 47093699959574966967 6277240766 3035354759 4571382178 52516642742746639193 2003059921 8174135966 2904357290 03342952605956307381 3232862794 3490763233 8298807531 95251019011573834187 9307021540 8914993488 4167509244 76146066808226480016 8477411853 7423454424 3710753907 77449920695517027618 3860626133 1384583000 7520449338 26560297606737113200 7093287091 2744374704 7230696977 20931014169283681902 5515108657 4637721112 5238978442 50569536967707854499 6996794686 4454905987 9316368892 30098793127736178215 4249992295 7635148220 8269895193 66803318252886939849 6465105820 9392398294 8879332036 25094431173012381970 6841614039 7019837679 3206832823 76464804295311802328 7825098194 5581530175 6717361332 06981125099618188159 3041690351 5988885193 4580727386 67385894228792284998 9208680582 5749279610 4841984443 63463244968487560233 6248270419 7862320900 2160990235 30436994184914631409 3431738143 6405462531 5209618369 08887070167683964243 7814059271 4563549061 3031072085 10383750510115747704 1718986106 8739696552 1267154688 9570350354 ÐÐÐ Ð≈0.5840100488 0478917102 6249167135 5734883056 69086550819281784197 9107908364 5819149637 2089369026 17114095598621679226 7152527586 6935894686 2618252825 45612819249647991571 1991841866 9863599724 5221416574 42050502077784686934 5390733422 5050978540 5274496866 40951586127583776330 9458526519 9627816965 9131567494 87193514652455794583 7982911446 4Ð\\approx0.\\\\ 5840100488 \\ 0478917102 \\ 6249167135 \\ 5734883056 \\ 6908655081\\\\ 9281784197 \\ 9107908364 \\ 5819149637 \\ 2089369026 \\ 1711409559\\\\ 8621679226 \\ 7152527586 \\ 6935894686 \\ 2618252825 \\ 4561281924\\\\ 9647991571 \\ 1991841866 \\ 9863599724 \\ 5221416574 \\ 4205050207\\\\ 7784686934 \\ 5390733422 \\ 5050978540 \\ 5274496866 \\ 4095158612\\\\ 7583776330 \\ 9458526519 \\ 9627816965 \\ 9131567494 \\ 8719351465\\\\ 2455794583 \\ 7982911446 \\ 4Ð≈0.5840100488 0478917102 6249167135 5734883056 69086550819281784197 9107908364 5819149637 2089369026 17114095598621679226 7152527586 6935894686 2618252825 45612819249647991571 1991841866 9863599724 5221416574 42050502077784686934 5390733422 5050978540 5274496866 40951586127583776330 9458526519 9627816965 9131567494 87193514652455794583 7982911446 4 三角函数表 θ\\thetaθ sin⁡θ\\sin\\thetasinθ cos⁡θ\\cos\\thetacosθ tan⁡θ\\tan\\thetatanθ 000 000 111 000 151515 6−24\\dfrac{\\sqrt6-\\sqrt2}446​−2​​ 6+24\\dfrac{\\sqrt6+\\sqrt2}446​+2​​ 2−32-\\sqrt32−3​ 181818 5−14\\dfrac{\\sqrt5-1}445​−1​ 10+254\\dfrac{\\sqrt{10+2\\sqrt5}}4410+25​​​ 25−1055\\dfrac{\\sqrt{25-10\\sqrt5}}5525−105​​​ 22.522.522.5 2−22\\dfrac{\\sqrt{2-\\sqrt2}}222−2​​​ 2+22\\dfrac{\\sqrt{2+\\sqrt2}}222+2​​​ 2−1\\sqrt2-12​−1 303030 12\\dfrac1221​ 32\\dfrac{\\sqrt3}223​​ 33\\dfrac{\\sqrt3}333​​ 363636 10−254\\dfrac{\\sqrt{10-2\\sqrt5}}4410−25​​​ 5+14\\dfrac{\\sqrt5+1}445​+1​ 5−25\\sqrt{5-2\\sqrt5}5−25​​ 454545 22\\dfrac{\\sqrt2}222​​ 22\\dfrac{\\sqrt2}222​​ 111 545454 5+14\\dfrac{\\sqrt5+1}445​+1​ 10−254\\dfrac{\\sqrt{10-2\\sqrt5}}4410−25​​​ 25+1055\\dfrac{\\sqrt{25+10\\sqrt5}}5525+105​​​ 606060 32\\dfrac{\\sqrt3}223​​ 12\\dfrac1221​ 3\\sqrt33​ 67.567.567.5 2+22\\dfrac{\\sqrt{2+\\sqrt2}}222+2​​​ 2−22\\dfrac{\\sqrt{2-\\sqrt2}}222−2​​​ 2+1\\sqrt2+12​+1 727272 10+254\\dfrac{\\sqrt{10+2\\sqrt5}}4410+25​​​ 5−14\\dfrac{\\sqrt5-1}445​−1​ 5+25\\sqrt{5+2\\sqrt5}5+25​​ 757575 6+24\\dfrac{\\sqrt6+\\sqrt2}446​+2​​ 6−24\\dfrac{\\sqrt6-\\sqrt2}446​−2​​ 2+32+\\sqrt32+3​ 909090 111 000 ∞\\infty∞ 由于下一张表非常大，所以我在这里提供下载链 接。","link":"/2020/01/01/Mathematics/"},{"title":"[Solution] Codeforces 1332A","text":"这是本人的第 003003003 篇题解。 这个题作为 CF div.2 T1，还是比较水的（我比较菜）。 数据范围 10810^8108，暴力搜索肯定不行。 这时就要想一些省时间的方法了。 首先，可以模拟样例找规律。 可以发现，只要小猫有足够的活动空间（走完要求的路线之后还在区域内）就不会走丢。且小猫至少有 1×11\\times11×1 的空间（除非不需要走路）。 所以就可以写代码了。 12345678910111213141516171819202122232425262728#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main() { int T; cin &gt;&gt; T; while (T--) { int l, r, d, u; // 左、右、下、上。 int x, y, x1, x2, y1, y2; // 小猫位置坐标和两个限制坐标。 scanf(\"%d%d%d%d\", &amp;l, &amp;r, &amp;d, &amp;u); scanf(\"%d%d%d%d%d%d\", &amp;x, &amp;y, &amp;x1, &amp;y1, &amp;x2, &amp;y2); x = r - l + x; // 计算：小猫在走完要求的路线后在不在规定的范围里。（x 坐标） y = u - d + y; // 计算：小猫在走完要求的路线后在不在规定的范围里。（y 坐标） if (x &gt;= x1 &amp;&amp; x &lt;= x2 &amp;&amp; y &gt;= y1 &amp;&amp; y &lt;= y2 &amp;&amp; // 判断走完后还在范围里。 (x2 &gt; x1 || l + r == 0) &amp;&amp; (y2 &gt; y1 || u + d == 0)) { // 判断是否有空间。l + r == 0 和 u + d == 0 分别表示 l == 0 &amp;&amp; r == 0 和 u == 0 &amp;&amp; d == 0。因为 l、r、d、u 均为非负整数。 cout &lt;&lt; \"Yes\\n\"; } else { cout &lt;&lt; \"No\\n\"; } } return 0;}","link":"/2020/04/02/codeforces-1332a/"},{"title":"[Solution] Codeforces 1333A","text":"本题是一个规律题。手玩几个样例以后能发现一些有意思的东西。比如对于 nnn、mmm 任意的图，都有一种固定的选取方法可以满足条件。比如这个： 图中黑色格子表示被染黑的部分，白色格子表示白色部分。（废话） 数字表示计数。即在 6×66 \\times 66×6 的方格里，只需要把 i=1i = 1i=1 或 j=1j = 1j=1 的格子染黑，就是一个合法的方案了。（注意：(1,1)(1, 1)(1,1)（左上角的格子）不算。） 对于 nnn、mmm 任意的图也一样。读者可以自己画画看。 即：在这样的情况下，B=n+m−2B = n + m - 2B=n+m−2，W=(n−1)+(m−1)−1=n+m−3W = (n - 1) + (m - 1) - 1 = n + m - 3W=(n−1)+(m−1)−1=n+m−3，可得 B=W+1B = W + 1B=W+1。 所以就可以写代码了。 123456789101112131415161718192021222324#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main() { int t; cin &gt;&gt; t; while (t--) { int n, m; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= m; j++) { if (i == 1 || j == 1) { puts(\"B\"); } else { puts(\"W\"); } } } }}","link":"/2020/04/09/codeforces-1333a/"},{"title":"[Solution] Codeforces 1334B","text":"本题是一个贪心题。 其实不需要暴力每种选择，只要知道何时能通过求平均得到最大的富人数就行。 可以从大到小排序，然后从前往后枚举。具体见注释。 reverse() 的功能是求倒序。允许字符串、数组等。 12345678910111213141516171819202122232425262728293031323334#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1e5 + 10;long long a[N];long long n, x;long long T;int main() { cin &gt;&gt; T; while (T--) { scanf(\"%lld%lld\", &amp;n, &amp;x); for (int i = 1; i &lt;= n; i++) { scanf(\"%lld\", &amp;a[i]); // 读入。 } sort(a + 1, a + n + 1); // 排序。 reverse(a + 1, a + n + 1); // 倒序。 long long sum = 0; long long ans = 0; for (int i = 1; i &lt;= n; i++) { sum += a[i]; // 求和，主要用来判断是否能通过取平均使这些人都变成富人 if (sum &gt;= x * i) { // 判断。如果较大的 i 个的财富总和大于平均数总和（i.e. 还能继续求平均的富人），就更新 ans。 ans = i; } } printf(\"%lld\\n\", ans); // 输出。 } return 0;}","link":"/2020/04/11/codeforces-1334b/"},{"title":"[Solution] Codeforces 1372A - Omkar and Completion","text":"Main Idea 给你一个整数 nnn，尝试找出任意一个长度为 nnn 的”完整“的数组 aaa。如果一个数组所有的元素都是整数、都不超过 100010001000，而且对于下标 x,y,zx, y, zx,y,z，满足： ax+ay≠aza_x + a_y \\neq a_z ax​+ay​​=az​ UQ\\Huge{\\textbf{UQ}}UQ 则这个数组被称为”完整“的数组。 Analysis 我们很容易地发现，暴力地枚举所有可能是不可行的。而 CF div.2 的第一题一般不考察算法。对于这一题，您可以找到通过某种方法找到的满足任何条件的解。这样比较方便且省时间。 若 aaa 中所有元素都相等， 即 a1=a2=⋯=ana_1 = a_2 = \\cdots = a_na1​=a2​=⋯=an​。这时，对于任意三个下标 p,q,rp, q, rp,q,r，ap+aq=2ap=2aq≠ara_p + a_q = 2a_p = 2a_q \\neq a_rap​+aq​=2ap​=2aq​​=ar​。（正整数） 所以如果我们把数组中所有数都赋值成不大于 100010001000 的数，问题解决了！ Code 12345678910111213141516171819#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;int main() { std::ios::sync_with_stdio(false); int t; std::cin &gt;&gt; t; int x = 0; while (t--) { std::cin &gt;&gt; x; // 输入 while (x--) { std::cout &lt;&lt; \"1 \"; // 输出同样的值可以保证满足条件。 } std::cout &lt;&lt; std::endl; } return 0;}","link":"/2020/07/19/codeforces-1372a/"},{"title":"[Solution] Codeforces 1382B - Sequential Nim","text":"Main Idea 有 nnn 堆石子，第 iii 堆拥有 A(i)A(i)A(i) 个石子。两个人轮流从当前第一个个数不为零的堆里拿出若干（正数）石子，那个每石子拿的人就输了。 Analysis 定义 “主动权”：一个石子堆中先拿石子的人具有”主动权“。因为对于第 i(A(i)&gt;1)i \\left(A(i) &gt; 1\\right)i(A(i)&gt;1) 堆石子，先拿的人总是可以控制拿的石子的个数。由于他足够聪明，他有 222 种方案来选择： 拿 A(i)A(i)A(i) 个，这堆石子被拿光了，在某些特殊情况下他应该采用这种方法； 拿 A(i)−1A(i) - 1A(i)−1 个，这堆石子剩下 111 个，强制后拿的人拿走这一个，他在下一堆中仍然具有“主动权”，这种方法适用于一般情况。 下面开始讨论。 如果 nnn 堆石子的个数全部大于 111，先拿的人在前 n−1n - 1n−1 堆中采用第 222 种，使他一直具有“主动权”。而在最后一堆拿走全部石子，他就赢了； 如果 nnn 堆石子的个数全部等于 111，那么先拿的人与后拿的人总是没得选，每次全拿走： 若 2∣n2 \\mid n2∣n，则最后一堆后拿的人具有“主动权”，后拿的人就赢了； 若 2∤n2 \\nmid n2∤n，则最后一堆先拿的人具有“主动权”，先拿的人就赢了。 如果是其他情况，即有 111 但不全是 111，那么在前缀 111 （前几堆连续 111）中，参照上一种情况；对于藏在中间的 111，足够聪明的选手可以通过与前面的堆调剂来保持自己的“主动权”，所以不必管。 Code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1e5 + 10;int A[N]; // 每堆个数int main() { int T; std::cin &gt;&gt; T; while (T--) { bool all = 1, exist = 0; // all 表示是否全是 1，exist 表示是否存在 1 int prefix1 = 0; // 前缀 1 的长度 bool first = 0; // 先拿第一堆的人是否具有“主动权” int n; std::cin &gt;&gt; n; for (int i = 1; i &lt;= n; i++) { std::cin &gt;&gt; A[i]; if (A[i] == 1) { // 判断是否全是 1 或 没有 1 exist = true; } else { all = false; } } for (int i = 1; A[i] == 1; i++) { // 寻找前缀 1 的长度 prefix1++; } if (all) { // 判断 if (n % 2 == 1) { first = 0; } else { first = 1; } } else if (!exist) { first = 0; } else { if (prefix1 % 2 == 1) { first = 1; } else { first = 0; } } if (!first) { std::cout &lt;&lt; \"First\" &lt;&lt; std::endl; } else { std::cout &lt;&lt; \"Second\" &lt;&lt; std::endl; } }}","link":"/2020/07/22/codeforces-1382b/"},{"title":"[Solution] Codeforces 1385B - Restore the Permutation by Merger","text":"Main Idea 一个长度为 nnn 的、其中 111 至 nnn 这 nnn 个整数出现且仅出现一次的排列被称为”排列“。 现在有两个完全相同的长度为 nnn 的排列 按相对顺序 混在了一起（i.e. 虽然排列混在了一起，但是每个排列中的数还保持原来的顺序。）比如：[3,1,2,3,1,2],[3,3,1,1,2,2],[3,1,3,1,2,2][\\mathit{3}, \\mathit{1}, \\mathit{2}, 3, 1, 2], [\\mathit{3}, 3, \\mathit{1}, 1, \\mathit{2}, 2], [\\mathit{3}, \\mathit{1}, 3, 1, \\mathit{2}, 2][3,1,2,3,1,2],[3,3,1,1,2,2],[3,1,3,1,2,2] 都是两个排列 p[3,1,2]p [3, 1, 2]p[3,1,2] 混在一起形成的”排列”。（斜体的跟非斜体的分别都是原来的 ppp。） 给你一个混合的排列，你需要找出唯一存在的原排列 ppp。 Analysis 排列满足互异性，所以每个数在排列 ppp 里只出现了一次。所以混合后的排列中每个数出现两次。 所以，对输入的排列去重（去掉出现第二次的元素），就得到了原来的排列。 比如，[3,1,3,1,2,2][\\mathit{3}, \\mathit{1}, 3, 1, \\mathit{2}, 2][3,1,3,1,2,2]，去掉斜体的元素，剩下的就是原来的排列了！ 输入时，用 Rec(i)Rec(i)Rec(i) 记录 iii 这个元素是否出现过。如果这个元素是第一次出现，那么输出它，否则不管它。 Code 12345678910111213141516171819202122232425262728293031#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;const int N = 110; // 二倍空间int A[N];bool Rec[N];int main() { int t; std::cin &gt;&gt; t; int n; while (t--) { for (int i = 1; i &lt;= N; i++) { // 初始化 A[i] = Rec[i] = 0; } std::cin &gt;&gt; n; for (int i = 1; i &lt;= 2 * n; i++) { // 二倍 std::cin &gt;&gt; A[i]; if (!Rec[A[i]]) { // 如果这个数没有出现过，那么输出它。 std::cout &lt;&lt; A[i] &lt;&lt; \" \"; Rec[A[i]] = true; } } std::cout &lt;&lt; std::endl; // 换行 } return 0;} 坑 注意输入的 nnn 是所求排列的长度，而不是输入排列的长度。所以空间要开二倍！","link":"/2020/07/19/codeforces-1385b/"},{"title":"My Code Style for OI","text":"本文介绍 xrdrsp 的 OI 中的代码规范。其来源主要为 Studying Father 的代码规范、_rqy 的代码规范、Menci 的代码规范 0 可能用到的词语解释 必须：任何时候均要遵循的规范。 应该：绝大多数正常情况下要遵循的规范，只允许在少数特殊情形下出现例外。 只能：不能采用其他规范。 推荐：这一规范符合通行规则，正常范围下优先使用。 可以/允许：非强制性的规范，可以视情况实施。 不应/不推荐：因为不符合通行规则，而在大多数情况下不使用该规则。 禁止：任何时候均不能使用的规则。 1 编译预处理指令 #include 语句必须置于程序开头。 多个库的顺序应该遵循如下原则：首先是自定义库，接下来是 C++ 库，最后是 C 库。其中 C 库和 C++ 库禁止使用 #include &quot;foo&quot; ，而必须使用 #include &lt;foo&gt; 。 禁止使用万能头文件。 #define 不推荐用于定义常量等，定义常量用 const。#define 可以替代 typedef 等。 禁止使用 #define 来代替函数定义，以及缩写控制性语句。 所有编译预处理指令不应缩进。 2 代码风格 2.1 缩进 必须采用 $ 4 $ 格缩进，且应该使用空格代替缩进。（见下） 2.2 空格及换行 花括号不应该换行。 不可以省略任何花括号，包括但不限于以下情况： if 语句后只跟随一条语句。这时不可以把 if 语句和要执行的语句写在同一行，且遵循缩进原则，必须加上花括号。 for 或 while 语句内只执行一条语句，这时也必须将要执行的语句另起一行，且遵循缩进原则，必须加上花括号。 以下情况必须加空格： 双目运算符两侧。（, 例外，见下） , 及 ; 的右边（如果其不处于行尾）。 if、for、while 等控制流关键字与其后的左括号之间。 do-while 中的 while、if-else 中的 else 与其前面的右花括号之间。 do-while 中的 do 与其后的左花括号之间。 结构体名与其后的左花括号之间。 结构体的右花括号与结构体变量名之间。 所有左大括号的左侧。（表示注释的大括号除外） ?、: 的两侧。 类型中 *、&amp; 的左侧。（如：const int &amp;a, int A(int *&amp;a)） 常成员函数的 const 两侧。 以下情况禁止加空格： 小括号及中括号与其内部的表达式或参数列表之间。 函数名与左括号之间（包括声明/定义/使用）。（operator 与所要重载的运算符之间、运算符与参数列表之间例外，必须加空格） 单目运算符（!、-、*、&amp;、~）之后（或自增自减运算符与其操作数之间）。 , 及 ; 的左侧。 类型中 *、&amp; 的右侧。 . 的两侧。 operator 与所要重载的运算符之间。 -&gt;、:: 的两侧。 若表达式过长内部必须换行，运算符处于行首（而非行尾）；不缩进；换行的优先级较高的子表达式也应该加括号以避免误读。 参数列表/初始化列表过长时内部必须换行，逗号处于行尾；缩四空格。 任何函数禁止写到一行。 一系列常量定义的上下应该有空行。 语句之间应该根据其意义酌情空行。 任何位置禁止出现连续的两个（或以上）空行。 函数或结构体等定义两侧必须有空行。 3 例子 建议使用例子（代码来自 @Dovuq）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 5e3 + 10;const int M = 3e3 + 10;struct bigint { int num[N]; int size; bigint() { size = 0; memset(num, 0, sizeof(num)); }};int n;bigint a[M];bigint ans;bigint calc(bigint x, bigint y);istream &amp;operator &gt;&gt;(istream &amp;is, bigint &amp;x) { int n; int i = 0; is &gt;&gt; n; for (; n; i++) { x.num[i] = n % 10; n /= 10; } x.size = i; return is;}ostream &amp;operator &lt;&lt;(ostream &amp;os, bigint x) { for (int i = x.size - 1; i &gt;= 0; i--) { os &lt;&lt; x.num[i]; } return os;}int main() { scanf(\"%d\", &amp;n); for (int i = 0; i &lt; n; i++) { cin &gt;&gt; a[i]; } ans = a[0]; for (int i = 1; i &lt; n; i++) { ans = calc(ans, a[i]); } cout &lt;&lt; ans; return 0;}bigint calc(bigint x, bigint y) { if (x.size &lt; y.size) { swap(x, y); } bigint c; c.size = x.size; int d = 0; for (int i = 0; i &lt; x.size; i++) { c.num[i] += x.num[i] + y.num[i] + d; d = (c.num[i] &lt; 7 ? 0 : (c.num[i] &lt; 14 ? 1 : 2)); c.num[i] %= 10; } if (d) { c.num[c.size++] = d; } return c;}","link":"/2020/04/01/codestyle/"},{"title":"[Solution] Luogu P1469","text":"第 012012012 篇题解。 Main Idea 给你 nnn 个数，求那个出现了奇数次的数是哪个。 Analysis 由于 1≤n≤107+11 \\leq n \\leq 10^7 + 11≤n≤107+1 且 1≤ai≥1091 \\leq a_i \\geq 10^91≤ai​≥109，我们必须在 O(n)\\mathit{O}(n)O(n) 的时间复杂度里完成计算。 此题使用位运算比较合适（快）。 c++ 中，按位异或（^）运算：相应位上的值相同，就返回 000，否则返回 111（当然是二进制中）。如 09 和 11 异或的结果是 02。详细运算如下： 12341001 (09)1011 (11)----0010 (02) 那么怎么算呢？ 注意到 按位异或运算具有交换律。即 a⊕b=b⊕aa \\oplus b = b \\oplus aa⊕b=b⊕a。可得将所有数全异或一边跟对排好序后异或是一样的。 则： (a⊕a⊕⋯⊕a)⏟偶数个⊕(b⊕b⊕⋯⊕b)⏟偶数个⊕⋯(n⊕n⊕⋯⊕n)⏟偶数个=0\\underbrace{(a \\oplus a \\oplus \\cdots \\oplus a)}_{\\text{偶数个}} \\oplus \\underbrace{(b \\oplus b \\oplus \\cdots \\oplus b)}_{\\text{偶数个}} \\oplus \\cdots \\underbrace{(n \\oplus n \\oplus \\cdots \\oplus n)}_{\\text{偶数个}} = 0 偶数个(a⊕a⊕⋯⊕a)​​⊕偶数个(b⊕b⊕⋯⊕b)​​⊕⋯偶数个(n⊕n⊕⋯⊕n)​​=0 {(a⊕a⊕⋯⊕a)⏟偶数个⊕(b⊕b⊕⋯⊕b)⏟偶数个⊕⋯[(n−1)⊕(n−1)⊕⋯⊕(n−1)]⏟偶数个}⊕(n⊕n⊕⋯⊕n)⏟奇数个=0⊕n=n\\{\\underbrace{(a \\oplus a \\oplus \\cdots \\oplus a)}_{\\text{偶数个}} \\oplus \\underbrace{(b \\oplus b \\oplus \\cdots \\oplus b)}_{\\text{偶数个}} \\oplus \\cdots \\underbrace{[(n-1) \\oplus (n-1) \\oplus \\cdots \\oplus (n-1)]}_{\\text{偶数个}}\\} \\oplus \\underbrace{(n \\oplus n \\oplus \\cdots \\oplus n)}_{\\text{奇数个}} = 0 \\oplus n = n {偶数个(a⊕a⊕⋯⊕a)​​⊕偶数个(b⊕b⊕⋯⊕b)​​⊕⋯偶数个[(n−1)⊕(n−1)⊕⋯⊕(n−1)]​​}⊕奇数个(n⊕n⊕⋯⊕n)​​=0⊕n=n 其中 ⊕\\oplus⊕ 表异或。 排好序异或会使出现 2k−12k - 12k−1 次的那种数 xxx 异或结果就是那个数 xxx。 所以不用排序了。 在此题中，每读入一个 aia_iai​，就把当前答案与 aia_iai​ 异或。以 2 1 2 为例，每次异或的结果是这样的： 123456// INPUT32 1 2// OUTPUT2 3 1 模拟运算过程： 123456789100000 (00)0010 (02)----0010 (02)0001 (01)----0011 (03)0001 (01)----0010 (02) // 即，目前出现奇数次的是 2。 Code 1234567891011121314151617181920#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main() { int n; int ans = 0; scanf(\"%d\", &amp;n); for (int i = 0; i &lt; n; i++) { int x; scanf(\"%d\", &amp;x); ans ^= x; // cout &lt;&lt; ans &lt;&lt; \" \"; } printf(\"%d\\n\", ans); return 0;}","link":"/2020/05/15/luogu-p1469/"},{"title":"[Solution] Luogu P2433","text":"这是本蒟蒻的第 001001001 篇题解。 Posted on Sun Mar 15, at 21:04:00 upd on Mon Mar 16, at 07:02:41 （更改了少数部分。） 问题 1 输出 I love Luogu!。直接输出即可。 1printf(\"I love Luogu!\"); 问题 2 由于小 A 和 Uim 分别拿走了 222、444 个，则他们一共拿走了 2+4=62 + 4 = 62+4=6 个。 由于在 1 中，我们算出来小 A 和 Uim 共拿走了 666 个，则八尾勇拿走了 $ 10 - 6 = 4$ 个。 1printf(\"%d %d\", 2 + 4, 10 - 2 - 4); 问题 3 这个问题考察我们对 cpp 中 int 的理解。当两个整形变量做除法时，若无法整除，则向下取整。如 14 / 4 的结果为 3。 所以可以尽情地使用整形变量的除法了。 总苹果数同学数\\dfrac{\\text{总苹果数}}{\\text{同学数}}同学数总苹果数​ 即为答案。 同学数×每个同学分的苹果数\\text{同学数} \\times \\text{每个同学分的苹果数}同学数×每个同学分的苹果数 即为答案。 总苹果数−分出去的苹果数\\text{总苹果数} - \\text{分出去的苹果数}总苹果数−分出去的苹果数 即为答案。 12int a = 14, b = 4;printf(\"%d\\n%d\\n%d\", a / b, (a / b) * b, a - (a / b) * b); 问题 4 500/3500 / 3500/3 即为答案。由于保留 666 位有效数字，得到 500/3≈166.667500 / 3 \\approx 166.667500/3≈166.667，输出这个数即可。 注：%.3lf 表示保留三位小数的double浮点数。 1printf(\"%.3lf\", 166.667); 问题 5 相遇问题。 仔细观察（画图）可得知，是两列火车的车尾在相遇。所以，S=260+220=480S = 260 + 220 = 480S=260+220=480，v=12+20=32v = 12 + 20 = 32v=12+20=32。根据公式得到 t=Sv=15t = \\dfrac{S}{v} = 15t=vS​=15。 1printf(\"15\"); 问题 6 注意保留 666 位有效数字！ 坑了我好久。 根据勾股定理 a2+b2=c2a^2 + b^2 = c^2a2+b2=c2，代入即可。 手算得到整数部分是 101010（两位数），所以需要保留四位小数。 1printf(\"10.8167\"); 问题 7 简单的模拟。 100+10=110100 + 10 = 110100+10=110 110−20=90110 - 20 = 90110−20=90 剩 000 元。 1printf(\"110\\n90\\n0\"); 问题 8 注意保留 666 位有效数字！ 先明确公式： 圆的周长：C=πd=2πrC = \\pi d = 2 \\pi rC=πd=2πr； 圆的面积：S=πr2S = \\pi r^2S=πr2； 球的体积：V=43πr3V = \\frac{4}{3}\\pi r^3V=34​πr3。 就可以通过套公式来得到结果啦！ 1printf(\"31.4159\\n78.5398\\n523.599\"); 问题 9 数学题；倒着推。 由于最后剩下一个，猴子贪吃了一个，除了这两个以外桃子的数量是总数量的一半，所以原苹果数为：(1+1)×2=4(1 + 1) \\times 2 = 4(1+1)×2=4 个。 以此类推，得到总苹果数是 222222 个。 天数 苹果个数 1 1 2 4 3 10 4 22 1printf(\"22\"); 问题 10 答案是 999。并不可能是别的。如果 &gt;10&gt; 10&gt;10，则评测时间将会 &lt;6min⁡&lt; 6 \\operatorname{min}&lt;6min；如果 &lt;8&lt; 8&lt;8，则评测时间将会 &gt;30min⁡&gt; 30 \\operatorname{min}&gt;30min。 所以直接输出。 1printf(\"9\"); 问题 11 注意保留 666 位有效数字！ 追及问题。 有公式 t=Sv1−v2t = \\dfrac{S}{v_1 - v_2}t=v1​−v2​S​，代入即可。 1printf(\"33.3333\"); 问题 12 通过数数，得： 答案为 131313； 答案为 RRR。 1printf(\"13\\nR\"); 问题 13 问题 10 说了球的体积公式为 V=43πr3V = \\frac{4}{3}\\pi r^3V=34​πr3。所以先求出两个球的体积分别约为 268.082603268.082603268.082603 和 4188.7906674188.7906674188.790667，相加得 4456.8732704456.8732704456.873270，立方根得 $ 16.456725\\cdots$，向下取整得 $ 16 $。 1printf(\"16\"); 问题 14 定价 报名人数 $ \\cdots $ ⋯\\cdots⋯ 108108108 121212 109109109 111111 110110110 101010 111111111 999 112112112 888 $ \\cdots $ ⋯\\cdots⋯ 得到，当定价为 $ x $ 元时，报名人数为 120−x120 - x120−x 人。这时，总共能收到 x×(120−x)x \\times (120 - x)x×(120−x) 元。我们使它等于 $ 3500 $ 即可。 列方程：x×(120−x)=3500x \\times (120 - x) = 3500x×(120−x)=3500，展开得 $ - x^2 + 120x - 3500 = 0，利用十字相乘得，利用十字相乘得 ，利用十字相乘得\\begin{cases}x_1 = 50 \\ x_2 = 70\\end{cases}$ 取较小值即 505050。 1printf(\"50\"); 讲完了！下面是完整代码。 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main() { int T; cin &gt;&gt; T; if (T == 1) { printf(\"I love Luogu!\"); } else if (T == 2) { printf(\"%d %d\", 6, 4); } else if (T == 3) { printf(\"%d\\n%d\\n%d\", 3, 12, 2); } else if (T == 4) { printf(\"%.3lf\", 500 * 1.0 / 3); } else if (T == 5) { printf(\"15\"); } else if (T == 6) { printf(\"10.8167\"); } else if (T == 7) { printf(\"110\\n90\\n0\"); } else if (T == 8) { printf(\"31.4159\\n78.5398\\n523.599\"); } else if (T == 9) { printf(\"22\"); } else if (T == 10) { printf(\"9\"); } else if (T == 11) { printf(\"33.3333\"); } else if (T == 12) { printf(\"13\\nR\"); } else if (T == 13) { printf(\"16\"); } else if (T == 14) { printf(\"50\"); } return 0;} 如有问题请在博客留言。 The end.","link":"/2020/03/27/luogu-p2433/"},{"title":"[Solution] Luogu P6368","text":"第 008008008 篇题解。 1 Analysis 一个简单的模拟题。 对于左右翻转，可以记录正在翻转的列 ppp，初始值为 ccc。每次翻转完一列以后将其还原为 ccc。（还原为 ccc 是因为先枚举 ppp。） 对于上下翻转，可以记录正在翻转的行 qqq，初始值为 rrr。每次翻转完一行以后将其减 111。（减 111 是因为后枚举 qqq。） 2 Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 100;int r, c;char a[N][N];int x, y;int main() { cin &gt;&gt; r &gt;&gt; c; for (int i = 1; i &lt;= r; i++) { scanf(\"%s\", a[i] + 1); } cin &gt;&gt; x &gt;&gt; y; int p = c; // 正在翻转的列数。 for (int i = 1; i &lt;= r; i++) { for (int j = c + 1; j &lt;= 2 * c; j++) { a[i][j] = a[i][p--]; // 赋值、翻转。 } p = c; // 还原。 } int q = r; // 正在翻转的行数。 for (int i = r + 1; i &lt;= 2 * r; i++) { for (int j = 1; j &lt;= 2 * c; j++) { // 赋值、翻转。 a[i][j] = a[q][j]; // 减 1 } q--; } for (int i = 1; i &lt;= 2 * r; i++) { for (int j = 1; j &lt;= 2 * c; j++) { if (i == x &amp;&amp; j == y) { // 判断、修改。 if (a[i][j] == '#') { a[i][j] = '.'; } else if (a[i][j] == '.') { a[i][j] = '#'; } } printf(\"%c\", a[i][j]); // 输出。 } puts(\"\"); // 换行。（puts() 自带换行。） } return 0;}","link":"/2020/04/13/luogu-p6368/"},{"title":"[Solution] Luogu P6402","text":"第 010010010 篇题解。 Analysis 本题是 map 练习题。 std::map 定义于头文件 &lt;map&gt;，是有序键值对容器，它的元素的键是唯一的。用比较函数 Compare 排序键。搜索、移除和插入操作拥有对数复杂度。 map 通常实现为红黑树。 ——摘自「C++ Reference std::map」 可以把 std::map 看作一个映射，即第一个值（关键字，key\\rm{key}key）唯一对应着第二个值（值，value\\rm{value}value）。 std::map 可以存储任意类型的数据，这解决了数组中不能出现「负下标」、「字符串下标」等问题。所以是一个常用的容器。 有关 std::map 的更多信息，可以点开上面的链接看。 对于这个题，用数组存名字和是否完成肯定是不现实的，因为不支持「字符串下标」。所以就要使用 std::map。 1map &lt;string, int&gt; participant; 这句话定义了映射，std::string 类型的关键字（名字）对应着 int 类型的值（名字出现的次数）。 接着，对每个选手进行统计。由于 参赛者的名字不一定是唯一的 ，需要递加名字出现的次数。 1participant[name[i]]++; 这句话对于输入的名字出现次数作了递加。 然后，输入了完成比赛的选手个数。这时需要把每个完成的选手名字出现的次数递减。 1participant[task_completed_name]--; 递减完了，剩下的那个没有归零的就是没完成的。 Code 1234567891011121314151617181920212223242526272829303132333435#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;map&gt;using namespace std;const int N = 1e5 + 10;const int M = 30;map &lt;string, int&gt; participant;string name[N];int n;int main() { cin &gt;&gt; n; for (int i = 1; i &lt;= n; i++) { cin &gt;&gt; name[i]; participant[name[i]]++; } for (int i = 1; i &lt;= n - 1; i++) { string task_completed_name; cin &gt;&gt; task_completed_name; participant[task_completed_name]--; } for (int i = 1; i &lt;= n; i++) { if (participant[name[i]]) { cout &lt;&lt; name[i]; break; } } return 0;} The end.","link":"/2020/04/19/luogu-p6402/"},{"title":"[Solution] Luogu P6369","text":"第 007007007 篇题解。 这道题比较水，主要考察数组 ，应该标成红题。 1 Analysis 暴力，读入数组，遍历。遇到不是 . 的就往上、下、左、右、左上、下、右上、右下八个方向判断是否有满足条件（三个字符相同）的。如有，则输出那个字符并退出；否则，继续寻找。 需要防止数组越界导致 RE\\colorbox{purple}{RE}RE​。所以从 333 始就好了。 2 Code 12345678910111213141516171819202122232425262728293031323334#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 40;int n;char a[N][N];int main() { cin &gt;&gt; n; for (int i = 3; i &lt; n + 3; i++) { // 从 3 开始，主要防数组越界。 scanf(\"%s\", a[i] + 3); } for (int i = 3; i &lt; n + 3; i++) { for (int j = 3; j &lt; n + 3; j++) { // 判断是否有满足条件的 // 分别有上、下、左、右、左上、左下、右上、右下八个方向 if (a[i][j] != '.' &amp;&amp; ( (a[i][j] == a[i][j - 1] &amp;&amp; a[i][j - 1] == a[i][j - 2]) || (a[i][j] == a[i][j + 1] &amp;&amp; a[i][j + 1] == a[i][j + 2]) || (a[i][j] == a[i - 1][j] &amp;&amp; a[i - 1][j] == a[i - 2][j]) || (a[i][j] == a[i + 1][j] &amp;&amp; a[i + 1][j] == a[i + 2][j]) || (a[i][j] == a[i + 1][j + 1] &amp;&amp; a[i + 1][j - 1] == a[i + 2][j + 2]) || (a[i][j] == a[i - 1][j + 1] &amp;&amp; a[i - 1][j + 1] == a[i - 2][j + 2]) || (a[i][j] == a[i - 1][j - 1] &amp;&amp; a[i - 1][j - 1] == a[i - 2][j - 2]) || (a[i][j] == a[i + 1][j - 1] &amp;&amp; a[i + 1][j - 1] == a[i + 2][j - 2]))) { printf(\"%c\", a[i][j]); // 有满足条件的，就输出 return 0; // 退出 } } } printf(\"ongoing\"); return 0;}","link":"/2020/04/12/luogu-p6369/"},{"title":"为告别纪念，为责任前行","text":"我们在这个冬天所经历的一切，是悲伤的记忆，是告别亲人的不舍，也是坚定抗争中生命的顽强与不屈。带着逝者的遗志，我们不会被轻易击垮。严冬之后，必有万物复苏，必有夏花烂漫。 不觉间，将是清明。 对人们而言，刚刚过去的这个冬天，似乎格外漫长。突如其来的新冠肺炎疫情，让中国社会与公众的生活进入了暂停状态。壮士断腕般的“封城”举措，“全国一盘棋”式的公共卫生动员，加上史无前例的大规模隔离行动，让我们带着与病毒抗争到底的决心，度过了一段艰难时光。 春分已过，清明悄然到来。在疫情影响下，这个遥寄哀思、悼亡怀人的日子，也因此有了一层格外沉重的特殊涵义。新冠病毒夺去很多人的生命，让很多家庭痛失父母、爱人、子女。更有一些医务工作者和抗疫工作人员，为此而殉职牺牲。那许许多多的面容和身影，永远定格在了2020年初春。 我们为逝者点燃烛光，俯身鞠躬，遥寄一份哀悼和思念。在英雄的城市、英雄的人民、英雄的逆行者背后，是一个个鲜活生动的人，是一段段有着欢笑泪水的故事，他们的悲痛，他们的哀伤，他们的抗争，他们的不屈，都值得铭记。 那不只是一个数字，一个名字，一块碑。每一个逝者的过往，都是生者的哀思。疫情防控的特殊时刻，许多人将无法去墓地祭扫，那些逝去的微笑，那些生前的故事，那些诉说与倾听，那些牵挂与想念，在清明这个日子里，隔着或远或近的距离，慢慢地回忆，轻轻地触摸。 告别，为了逝者，亦为生者。对逝者而言，最好的怀念是记得，也是放下——告别伤痛，战胜疫情，回归正常生活，更好地活着。如此，才能告慰逝去的亲人；如此，才能让抗疫牺牲者安息。离去的亲人，希望每一个生者幸福健康；奉献生命的勇士，将生的美好给予他人。坚强、更有意义地活着，是每一个生者的责任。 清明既是寄托哀思的日子，也是走向新生的日子。春回大地，生机勃发，我们带着对逝者的思念，迎候生命的生生不息。经历了严冬和病毒的封锁，春天来临，生活回归，被迫暂停的城市开始运转，社会逐渐步入常态。阳光里，路边的店铺一间间重新开业，城市的大街小巷，慢慢恢复往常的喧闹与拥挤。这些我们再熟悉不过的“日常”，在经历困境之后，变得珍贵。作为生者的我们，用心过好这得来不易的平常日子，才是对逝者最好的怀念。 在珍惜、过好眼下生活的同时，我们也要看到，尽管国内整体态势向好，但离彻底战胜新冠病毒尚有一段“决胜距离”，况且世界各地的疫情正在加剧。“外防输入，内防反弹”，防控工作丝毫不能松懈。与此同时，复产复工、保障经济生活回归正轨也面临不小压力。此时，唯有将悲痛凝聚为斗志与力量，我们才能最终战胜疫情。取得抗疫斗争的最后胜利，是我们对逝去亲人最好的安慰，也是对那些牺牲者最好的交代。 清明节的到来，凝聚了我们深沉的哀思，也意味着春天真正来临。我们在这个冬天所经历的一切，是悲伤的记忆，是告别亲人的不舍，也是坚定抗争中生命的顽强与不屈。带着逝者的遗志，我们不会被轻易击垮。严冬之后，必有万物复苏，必有夏花烂漫。 燃一缕思念的烛火，愿逝者安息；带着思念前行，愿生者坚强。 综合：新华视点、中国青年报 原标题：《2020年4月4日，全国哀悼》","link":"/2020/04/04/%E4%B8%BA%E5%91%8A%E5%88%AB%E7%BA%AA%E5%BF%B5%EF%BC%8C%E4%B8%BA%E8%B4%A3%E4%BB%BB%E5%89%8D%E8%A1%8C.md/"},{"title":"[Solution] Luogu P6244","text":"这是本人的第 002002002 篇题解。 1 题意简述 有 nnn 个事件，要求在时间不冲突的情况下完成尽量多的事件。（完成一个事件后可以立即开始下一个事件。） 2 思路分析 这道题就是个贪心题。 贪心，是一种仅考虑当前决策、不顾全大局的思想，与 DP（动态规划）正好相反。正因为如此，许多贪心代码很短，许多贪心代码都是错的。 在这道题上，我们该根据什么贪心呢？下面有几个选择，我们需要选出正确的。判别贪心正确与否的方法是找反例和证明。 先做早开始的事件。 先做持续时间短的事件。 先做早结束的事件。 或许你认为还有别的可能性，但这里只列举 333 个。 下面是这三种贪心的证明过程。 2.1 先做早开始的事件 表面看看很正确，但如果一个事件开始的时间很早，而持续时间很长，那这个算法就爆炸了。举出反例： 输入： 123431 1002 13 1 正确的输出： 12 对“先做早开始的事件”贪心的输出： 11 所以明显地 WA 了。应该先做 2，再做 3，而根据这个算法，程序认为 1 开始的时间早，这样 100100100 时间过去了，只做了一个事件，忽略了 2 和 3。所以这种算法是错误的。 2.2 先做持续时间短的事件 吸取了上一次的教训，发现事件的持续时间很重要。那么，先做持续时间短的事件是否可行呢？ 看看也十分正确，但仍然可以轻松举出反例。 输入： 1234541 1002 24 15 2 正确的输出： 13 对“先做持续时间短的事件”贪心的输出： 12 所以又明显地 WA 了。应该先做 2，再做 3，再做 4，而根据这个算法，程序认为 3 持续的时间短，但先做 2 就多做了一件事情。所以这种算法是错误的。 2.3 先做结束时间早的事件 吸取了上一次的教训，发现事件的结束时间很重要。那么，先做结束时间早的事件是否可行呢？ 看看也十分正确，实际上也十分正确。 为什么呢？ 当一个事件结束得较早时，它便为下一个事件留下了更多的时间，就能做更多的事件。所以明显正确。 也举不出反例了。（读者可以自己试试。） 3 算法流程 清晰明了。有了 1 的阅读基础，可以得出：先按照结束时间排序，再一个个地判断能否参加。 4 代码实现 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1e4 + 10;struct Node { // 定义结构体，存储的是每个事件 int start; // 事件的开始时间 int end; // 事件的结束时间 int last; // 事件的持续时间} event[N];bool operator&lt;(Node i, Node j) { // 重载运算符，用来对结构体排序。 // 除此之外，常用的对结构体排序的方法还有自定义比较函数。不懂的可以百度。 return i.end &lt; j.end;}int n;int main() { cin &gt;&gt; n; for (int i = 1; i &lt;= n; i++) { // 读入 scanf(\"%d%d\", &amp;event[i].start, &amp;event[i].last); event[i].end = event[i].start + event[i].last; // 计算结束时间 } sort(event + 1, event + n + 1); // 排序 // 下面遍历每个事件，判断开始时间是否在做的上一个事件的结束时间后。 int cur = event[1].end; // 做完这些选择的事件的结束时间。第一个事件肯定做。 int ans = 1; for (int i = 2; i &lt;= n; i++) { if (event[i].start &gt;= cur) {// 判断。 ans++; cur = event[i].end; } } cout &lt;&lt; ans; return 0;} 5 总结 这道题用了贪心的思想。这个思想不能随便用，需要证明其正确性或举出反例。这样才能保证不出错。 贪心的思维过程很重要。您在必要的时候可以画图或列式子。如本题，您可以把每个事件的开始和结束的时间连起来简化成线段，一起画到数轴上，整体地观看便于思考。 6 其他 这篇题解纯手打（废话），如有任何错误或不妥之处请评论。谢谢。","link":"/2020/03/30/luogu-p6244/"}],"tags":[{"name":"题解","slug":"题解","link":"/tags/%E9%A2%98%E8%A7%A3/"},{"name":"排序","slug":"排序","link":"/tags/%E6%8E%92%E5%BA%8F/"},{"name":"数学","slug":"数学","link":"/tags/%E6%95%B0%E5%AD%A6/"},{"name":"工具","slug":"工具","link":"/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Tricky","slug":"Tricky","link":"/tags/Tricky/"},{"name":"枚举","slug":"枚举","link":"/tags/%E6%9E%9A%E4%B8%BE/"},{"name":"模拟","slug":"模拟","link":"/tags/%E6%A8%A1%E6%8B%9F/"},{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"语法","slug":"语法","link":"/tags/%E8%AF%AD%E6%B3%95/"},{"name":"位运算","slug":"位运算","link":"/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"name":"贪心","slug":"贪心","link":"/tags/%E8%B4%AA%E5%BF%83/"}],"categories":[{"name":"Solution","slug":"Solution","link":"/categories/Solution/"},{"name":"Mathematics","slug":"Mathematics","link":"/categories/Mathematics/"},{"name":"Codeforces","slug":"Solution/Codeforces","link":"/categories/Solution/Codeforces/"},{"name":"Tools","slug":"Mathematics/Tools","link":"/categories/Mathematics/Tools/"},{"name":"Code","slug":"Code","link":"/categories/Code/"},{"name":"Luogu","slug":"Solution/Luogu","link":"/categories/Solution/Luogu/"},{"name":"DailyLife","slug":"DailyLife","link":"/categories/DailyLife/"}]}