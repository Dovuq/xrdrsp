<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuan Gao</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xrdrsp.pw/"/>
  <updated>2020-07-23T05:00:40.522Z</updated>
  <id>http://blog.xrdrsp.pw/</id>
  
  <author>
    <name>xrdrsp</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>latex</title>
    <link href="http://blog.xrdrsp.pw/2021/01/01/latex/"/>
    <id>http://blog.xrdrsp.pw/2021/01/01/latex/</id>
    <published>2020-12-31T16:00:00.000Z</published>
    <updated>2020-07-23T05:00:40.522Z</updated>
    
    <content type="html"><![CDATA[<p>$\color{red}{text}$</p><p>$\text{TEXT}$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;$\color{red}{text}$&lt;/p&gt;
&lt;p&gt;$\text{TEXT}$&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[Solution] Codeforces 1382B - Sequential Nim</title>
    <link href="http://blog.xrdrsp.pw/2020/07/22/codeforces-1382b/"/>
    <id>http://blog.xrdrsp.pw/2020/07/22/codeforces-1382b/</id>
    <published>2020-07-22T13:07:00.000Z</published>
    <updated>2020-07-22T13:18:21.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Main-Idea"><a href="#Main-Idea" class="headerlink" title="Main Idea"></a>Main Idea</h1><p>有 $n$ 堆石子，第 $i$ 堆拥有 $A(i)$ 个石子。两个人轮流从当前第一个个数不为零的堆里拿出若干（正数）石子，那个每石子拿的人就输了。</p><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>定义 <strong>“主动权”</strong>：一个石子堆中先拿石子的人具有”主动权“。因为对于第 $i \left(A(i) &gt; 1\right)$ 堆石子，先拿的人总是可以控制拿的石子的个数。由于他足够聪明，他有 $2$ 种方案来选择：</p><ol><li>拿 $A(i)$ 个，这堆石子被拿光了，在某些特殊情况下他应该采用这种方法；</li><li>拿 $A(i) - 1$ 个，这堆石子剩下 $1$ 个，强制后拿的人拿走这一个，他在下一堆中仍然具有“主动权”，这种方法适用于一般情况。</li></ol><p>下面开始讨论。</p><ul><li>如果 $n$ 堆石子的个数全部大于 $1$，先拿的人在前 $n - 1$ 堆中采用第 $2$ 种，使他一直具有“主动权”。而在最后一堆拿走全部石子，他就赢了；</li><li>如果 $n$ 堆石子的个数全部等于 $1$，那么先拿的人与后拿的人总是没得选，每次全拿走：<ul><li>若 $2 \mid n$，则最后一堆后拿的人具有“主动权”，后拿的人就赢了；</li><li>若 $2 \nmid n$，则最后一堆先拿的人具有“主动权”，先拿的人就赢了。</li></ul></li><li>如果是其他情况，即有 $1$ 但不全是 $1$，那么在前缀 $1$ （前几堆连续 $1$）中，参照上一种情况；对于藏在中间的 $1$，足够聪明的选手可以通过与前面的堆调剂来保持自己的“主动权”，所以不必管。</li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> A[N];                                   <span class="comment">// 每堆个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">bool</span> all = <span class="number">1</span>, exist = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// all 表示是否全是 1，exist 表示是否存在 1</span></span><br><span class="line">        <span class="keyword">int</span> prefix1 = <span class="number">0</span>;                    <span class="comment">// 前缀 1 的长度</span></span><br><span class="line">        <span class="keyword">bool</span> first = <span class="number">0</span>;                     <span class="comment">// 先拿第一堆的人是否具有“主动权”</span></span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; A[i];</span><br><span class="line">            <span class="keyword">if</span> (A[i] == <span class="number">1</span>) &#123;                <span class="comment">// 判断是否全是 1 或 没有 1</span></span><br><span class="line">                exist = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                all = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; A[i] == <span class="number">1</span>; i++) &#123;   <span class="comment">// 寻找前缀 1 的长度</span></span><br><span class="line">            prefix1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (all) &#123;                          <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                first = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                first = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!exist) &#123;</span><br><span class="line">            first = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (prefix1 % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                first = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                first = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"First"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Second"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Main-Idea&quot;&gt;&lt;a href=&quot;#Main-Idea&quot; class=&quot;headerlink&quot; title=&quot;Main Idea&quot;&gt;&lt;/a&gt;Main Idea&lt;/h1&gt;&lt;p&gt;有 $n$ 堆石子，第 $i$ 堆拥有 $A(i)$ 个石子。两个人轮流从当前第一个
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Codeforces" scheme="http://blog.xrdrsp.pw/categories/Solution/Codeforces/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="模拟" scheme="http://blog.xrdrsp.pw/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Codeforces 1372A - Omkar and Completion</title>
    <link href="http://blog.xrdrsp.pw/2020/07/19/codeforces-1372a/"/>
    <id>http://blog.xrdrsp.pw/2020/07/19/codeforces-1372a/</id>
    <published>2020-07-18T16:00:00.000Z</published>
    <updated>2020-07-22T15:28:32.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Main-Idea"><a href="#Main-Idea" class="headerlink" title="Main Idea"></a>Main Idea</h1><p>给你一个整数 $n$，尝试找出任意一个长度为 $n$ 的”完整“的数组 $a$。如果一个数组所有的元素都是整数、都不超过 $1000$，而且对于下标 $x, y, z$，满足：</p><script type="math/tex; mode=display">a_x + a_y \neq a_z</script><p>则这个数组被称为”完整“的数组。</p><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>我们很容易地发现，暴力地枚举所有可能是不可行的。而 CF div.2 的第一题一般不考察算法。对于这一题，您可以找到通过某种方法找到的满足任何条件的解。这样比较方便且省时间。</p><p>若 $a$ 中所有元素都相等， 即 $a_1 = a_2 = \cdots = a_n$。这时，对于任意三个下标 $p, q, r$，$a_p + a_q = 2a_p = 2a_q \neq a_r$。（正整数）</p><p>所以如果我们把数组中所有数都赋值成不大于 $1000$ 的数，问题解决了！</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;                  <span class="comment">// 输入</span></span><br><span class="line">        <span class="keyword">while</span> (x--) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1 "</span>;          <span class="comment">// 输出同样的值可以保证满足条件。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Main-Idea&quot;&gt;&lt;a href=&quot;#Main-Idea&quot; class=&quot;headerlink&quot; title=&quot;Main Idea&quot;&gt;&lt;/a&gt;Main Idea&lt;/h1&gt;&lt;p&gt;给你一个整数 $n$，尝试找出任意一个长度为 $n$ 的”完整“的数组 $a$。如果
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Codeforces" scheme="http://blog.xrdrsp.pw/categories/Solution/Codeforces/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Codeforces 1385B - Restore the Permutation by Merger</title>
    <link href="http://blog.xrdrsp.pw/2020/07/19/codeforces-1385b/"/>
    <id>http://blog.xrdrsp.pw/2020/07/19/codeforces-1385b/</id>
    <published>2020-07-18T16:00:00.000Z</published>
    <updated>2020-07-22T13:18:18.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Main-Idea"><a href="#Main-Idea" class="headerlink" title="Main Idea"></a>Main Idea</h1><p>一个长度为 $n$ 的、其中 $1$ 至 $n$ 这 $n$ 个整数出现且仅出现一次的排列被称为”排列“。</p><p>现在有两个完全相同的长度为 $n$ 的排列 <strong>按相对顺序</strong> 混在了一起（i.e. 虽然排列混在了一起，但是每个排列中的数还保持原来的顺序。）比如：$[\mathit{3}, \mathit{1}, \mathit{2}, 3, 1, 2], [\mathit{3}, 3, \mathit{1}, 1, \mathit{2}, 2], [\mathit{3}, \mathit{1}, 3, 1, \mathit{2}, 2]$ 都是两个排列 $p [3, 1, 2]$ 混在一起形成的”排列”。（斜体的跟非斜体的分别都是原来的 $p$。）</p><p>给你一个混合的排列，你需要找出唯一存在的原排列 $p$。</p><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>排列满足互异性，所以每个数在排列 $p$ 里只出现了一次。所以混合后的排列中每个数出现两次。</p><p>所以，对输入的排列去重（去掉出现第二次的元素），就得到了原来的排列。</p><p>比如，$[\mathit{3}, \mathit{1}, 3, 1, \mathit{2}, 2]$，去掉斜体的元素，剩下的就是原来的排列了！</p><p>输入时，用 $Rec(i)$ 记录 $i$ 这个元素是否出现过。如果这个元素是第一次出现，那么输出它，否则不管它。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;      <span class="comment">// 二倍空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[N];</span><br><span class="line"><span class="keyword">bool</span> Rec[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;      <span class="comment">// 初始化</span></span><br><span class="line">            A[i] = Rec[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++) &#123;  <span class="comment">// 二倍</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; A[i];</span><br><span class="line">            <span class="keyword">if</span> (!Rec[A[i]]) &#123;               <span class="comment">// 如果这个数没有出现过，那么输出它。</span></span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; A[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                Rec[A[i]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;             <span class="comment">// 换行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>注意输入的 $n$ 是所求排列的长度，而不是输入排列的长度。所以空间要开二倍！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Main-Idea&quot;&gt;&lt;a href=&quot;#Main-Idea&quot; class=&quot;headerlink&quot; title=&quot;Main Idea&quot;&gt;&lt;/a&gt;Main Idea&lt;/h1&gt;&lt;p&gt;一个长度为 $n$ 的、其中 $1$ 至 $n$ 这 $n$ 个整数出现且仅出现一次
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Codeforces" scheme="http://blog.xrdrsp.pw/categories/Solution/Codeforces/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="模拟" scheme="http://blog.xrdrsp.pw/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Luogu P1469</title>
    <link href="http://blog.xrdrsp.pw/2020/05/15/luogu-p1469/"/>
    <id>http://blog.xrdrsp.pw/2020/05/15/luogu-p1469/</id>
    <published>2020-05-14T16:00:00.000Z</published>
    <updated>2020-07-22T13:17:48.008Z</updated>
    
    <content type="html"><![CDATA[<p>第 $012$ 篇题解。</p><h2 id="Main-Idea"><a href="#Main-Idea" class="headerlink" title="Main Idea"></a>Main Idea</h2><p>给你 $n$ 个数，求那个出现了奇数次的数是哪个。</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>由于 $1 \leq n \leq 10^7 + 1$ 且 $1 \leq a_i \geq 10^9$，我们必须在 $\mathit{O}(n)$ 的时间复杂度里完成计算。</p><p>此题使用位运算比较合适（快）。</p><p><code>c++</code> 中，按位异或（<code>^</code>）运算：相应位上的值相同，就返回 $0$，否则返回 $1$（当然是二进制中）。如 <code>09</code> 和 <code>11</code> 异或的结果是 <code>02</code>。详细运算如下：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1001 (09)</span><br><span class="line">1011 (11)</span><br><span class="line">----</span><br><span class="line">0010 (02)</span><br></pre></td></tr></table></figure></p><p>那么怎么算呢？</p><p>注意到 <strong>按位异或运算具有交换律</strong>。即 $a \oplus b = b \oplus a$。可得将所有数全异或一边跟对排好序后异或是一样的。</p><p>则：</p><script type="math/tex; mode=display">\underbrace{(a \oplus a \oplus \cdots \oplus a)}_{\text{偶数个}}\oplus\underbrace{(b \oplus b \oplus \cdots \oplus b)}_{\text{偶数个}}\oplus \cdots \underbrace{(n \oplus n \oplus \cdots \oplus n)}_{\text{偶数个}} = 0</script><script type="math/tex; mode=display">\{\underbrace{(a \oplus a \oplus \cdots \oplus a)}_{\text{偶数个}}\oplus\underbrace{(b \oplus b \oplus \cdots \oplus b)}_{\text{偶数个}}\oplus \cdots \underbrace{[(n-1) \oplus (n-1) \oplus \cdots \oplus (n-1)]}_{\text{偶数个}}\}\oplus\underbrace{(n \oplus n \oplus \cdots \oplus n)}_{\text{奇数个}} = 0 \oplus n = n</script><p>其中 $\oplus$ 表异或。</p><p>排好序异或会使出现 $2k - 1$ 次的那种数 $x$ 异或结果就是那个数 $x$。 </p><p>所以不用排序了。</p><p>在此题中，每读入一个 $a_i$，就把当前答案与 $a_i$ 异或。以 <code>2 1 2</code> 为例，每次异或的结果是这样的：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; INPUT</span><br><span class="line">3</span><br><span class="line">2 1 2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; OUTPUT</span><br><span class="line">2 3 1</span><br></pre></td></tr></table></figure></p><p>模拟运算过程：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0000 (00)</span><br><span class="line">0010 (02)</span><br><span class="line">----</span><br><span class="line">0010 (02)</span><br><span class="line">0001 (01)</span><br><span class="line">----</span><br><span class="line">0011 (03)</span><br><span class="line">0001 (01)</span><br><span class="line">----</span><br><span class="line">0010 (02) &#x2F;&#x2F; 即，目前出现奇数次的是 2。</span><br></pre></td></tr></table></figure></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        ans ^= x;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; ans &lt;&lt; " ";</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第 $012$ 篇题解。&lt;/p&gt;
&lt;h2 id=&quot;Main-Idea&quot;&gt;&lt;a href=&quot;#Main-Idea&quot; class=&quot;headerlink&quot; title=&quot;Main Idea&quot;&gt;&lt;/a&gt;Main Idea&lt;/h2&gt;&lt;p&gt;给你 $n$ 个数，求那个出现了奇数次的数是
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Luogu" scheme="http://blog.xrdrsp.pw/categories/Solution/Luogu/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="语法" scheme="http://blog.xrdrsp.pw/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="位运算" scheme="http://blog.xrdrsp.pw/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Luogu P6402</title>
    <link href="http://blog.xrdrsp.pw/2020/04/19/luogu-p6402/"/>
    <id>http://blog.xrdrsp.pw/2020/04/19/luogu-p6402/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-07-22T13:18:12.029Z</updated>
    
    <content type="html"><![CDATA[<p>第 $010$ 篇题解。</p><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>本题是 <code>map</code> 练习题。</p><blockquote><p><code>std::map</code> 定义于头文件 <code>&lt;map&gt;</code>，是有序键值对容器，它的元素的键是唯一的。用比较函数 <code>Compare</code> 排序键。搜索、移除和插入操作拥有对数复杂度。 <code>map</code> 通常实现为红黑树。</p><p>——摘自「<a href="https://zh.cppreference.com/w/cpp/container/map" target="_blank" rel="noopener">C++ Reference std::map</a>」</p></blockquote><p>可以把 <code>std::map</code> 看作一个映射，即第一个值（关键字，$\rm{key}$）唯一对应着第二个值（值，$\rm{value}$）。</p><p><code>std::map</code> 可以存储任意类型的数据，这解决了数组中不能出现「负下标」、「字符串下标」等问题。所以是一个常用的容器。</p><p>有关 <code>std::map</code> 的更多信息，可以点开上面的链接看。</p><p>对于这个题，用数组存名字和是否完成肯定是不现实的，因为不支持「字符串下标」。所以就要使用 <code>std::map</code>。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; participant;</span><br></pre></td></tr></table></figure></p><p>这句话定义了映射，<code>std::string</code> 类型的关键字（名字）对应着 <code>int</code> 类型的值（名字出现的次数）。</p><p>接着，对每个选手进行统计。由于 <strong>参赛者的名字不一定是唯一的</strong> ，需要递加名字出现的次数。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">participant[name[i]]++;</span><br></pre></td></tr></table></figure></p><p>这句话对于输入的名字出现次数作了递加。</p><p>然后，输入了完成比赛的选手个数。这时需要把每个完成的选手名字出现的次数递减。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">participant[task_completed_name]--;</span><br></pre></td></tr></table></figure></p><p>递减完了，剩下的那个没有归零的就是没完成的。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; participant;</span><br><span class="line"><span class="built_in">string</span> name[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name[i];</span><br><span class="line">        participant[name[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">string</span> task_completed_name;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; task_completed_name;</span><br><span class="line">        participant[task_completed_name]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (participant[name[i]]) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; name[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第 $010$ 篇题解。&lt;/p&gt;
&lt;h1 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h1&gt;&lt;p&gt;本题是 &lt;code&gt;map&lt;/code&gt; 练习题。&lt;
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Luogu" scheme="http://blog.xrdrsp.pw/categories/Solution/Luogu/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="语法" scheme="http://blog.xrdrsp.pw/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="模拟" scheme="http://blog.xrdrsp.pw/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Luogu P6368</title>
    <link href="http://blog.xrdrsp.pw/2020/04/13/luogu-p6368/"/>
    <id>http://blog.xrdrsp.pw/2020/04/13/luogu-p6368/</id>
    <published>2020-04-12T16:00:00.000Z</published>
    <updated>2020-07-22T13:18:09.611Z</updated>
    
    <content type="html"><![CDATA[<p>第 $008$ 篇题解。</p><h1 id="1-Analysis"><a href="#1-Analysis" class="headerlink" title="1 Analysis"></a>1 Analysis</h1><p>一个简单的模拟题。</p><p>对于左右翻转，可以记录正在翻转的列 $p$，初始值为 $c$。每次翻转完一列以后将其还原为 $c$。（还原为 $c$ 是因为先枚举 $p$。）</p><p>对于上下翻转，可以记录正在翻转的行 $q$，初始值为 $r$。每次翻转完一行以后将其减 $1$。（减 $1$ 是因为后枚举 $q$。）</p><h1 id="2-Code"><a href="#2-Code" class="headerlink" title="2 Code"></a>2 Code</h1><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line"><span class="keyword">char</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">int</span> p = c;<span class="comment">// 正在翻转的列数。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = c + <span class="number">1</span>; j &lt;= <span class="number">2</span> * c; j++) &#123;</span><br><span class="line">            a[i][j] = a[i][p--];<span class="comment">// 赋值、翻转。</span></span><br><span class="line">        &#125;</span><br><span class="line">        p = c;<span class="comment">// 还原。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q = r;<span class="comment">// 正在翻转的行数。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = r + <span class="number">1</span>; i &lt;= <span class="number">2</span> * r; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span> * c; j++) &#123;<span class="comment">// 赋值、翻转。</span></span><br><span class="line">            a[i][j] = a[q][j];<span class="comment">// 减 1</span></span><br><span class="line">        &#125;</span><br><span class="line">        q--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * r; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span> * c; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == x &amp;&amp; j == y) &#123;<span class="comment">// 判断、修改。</span></span><br><span class="line">                <span class="keyword">if</span> (a[i][j] == <span class="string">'#'</span>) &#123;</span><br><span class="line">                    a[i][j] = <span class="string">'.'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i][j] == <span class="string">'.'</span>) &#123;</span><br><span class="line">                    a[i][j] = <span class="string">'#'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, a[i][j]);<span class="comment">// 输出。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);<span class="comment">// 换行。（puts() 自带换行。）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第 $008$ 篇题解。&lt;/p&gt;
&lt;h1 id=&quot;1-Analysis&quot;&gt;&lt;a href=&quot;#1-Analysis&quot; class=&quot;headerlink&quot; title=&quot;1 Analysis&quot;&gt;&lt;/a&gt;1 Analysis&lt;/h1&gt;&lt;p&gt;一个简单的模拟题。&lt;/p&gt;
&lt;p&gt;对
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Luogu" scheme="http://blog.xrdrsp.pw/categories/Solution/Luogu/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="模拟" scheme="http://blog.xrdrsp.pw/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Luogu P6369</title>
    <link href="http://blog.xrdrsp.pw/2020/04/12/luogu-p6369/"/>
    <id>http://blog.xrdrsp.pw/2020/04/12/luogu-p6369/</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2020-07-22T13:18:16.777Z</updated>
    
    <content type="html"><![CDATA[<p>第 $007$ 篇题解。</p><p>这道题比较水，主要考察数组 <del>，应该标成红题。</del></p><h1 id="1-Analysis"><a href="#1-Analysis" class="headerlink" title="1 Analysis"></a>1 Analysis</h1><p>暴力，读入数组，遍历。遇到不是 <code>.</code> 的就往上、下、左、右、左上、下、右上、右下八个方向判断是否有满足条件（三个字符相同）的。如有，则输出那个字符并退出；否则，继续寻找。<br>需要防止数组越界导致 $\colorbox{purple}{RE}$。所以从 $3$ 始就好了。</p><h1 id="2-Code"><a href="#2-Code" class="headerlink" title="2 Code"></a>2 Code</h1><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n + <span class="number">3</span>; i++) &#123;<span class="comment">// 从 3 开始，主要防数组越界。</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a[i] + <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n + <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span>; j &lt; n + <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 判断是否有满足条件的</span></span><br><span class="line">            <span class="comment">// 分别有上、下、左、右、左上、左下、右上、右下八个方向</span></span><br><span class="line">            <span class="keyword">if</span> (a[i][j] != <span class="string">'.'</span> &amp;&amp; (</span><br><span class="line">            (a[i][j] == a[i][j - <span class="number">1</span>] &amp;&amp; a[i][j - <span class="number">1</span>] == a[i][j - <span class="number">2</span>]) ||</span><br><span class="line">            (a[i][j] == a[i][j + <span class="number">1</span>] &amp;&amp; a[i][j + <span class="number">1</span>] == a[i][j + <span class="number">2</span>]) ||</span><br><span class="line">            (a[i][j] == a[i - <span class="number">1</span>][j] &amp;&amp; a[i - <span class="number">1</span>][j] == a[i - <span class="number">2</span>][j]) ||</span><br><span class="line">            (a[i][j] == a[i + <span class="number">1</span>][j] &amp;&amp; a[i + <span class="number">1</span>][j] == a[i + <span class="number">2</span>][j]) ||</span><br><span class="line">            (a[i][j] == a[i + <span class="number">1</span>][j + <span class="number">1</span>] &amp;&amp; a[i + <span class="number">1</span>][j - <span class="number">1</span>] == a[i + <span class="number">2</span>][j + <span class="number">2</span>]) ||</span><br><span class="line">            (a[i][j] == a[i - <span class="number">1</span>][j + <span class="number">1</span>] &amp;&amp; a[i - <span class="number">1</span>][j + <span class="number">1</span>] == a[i - <span class="number">2</span>][j + <span class="number">2</span>]) ||</span><br><span class="line">            (a[i][j] == a[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; a[i - <span class="number">1</span>][j - <span class="number">1</span>] == a[i - <span class="number">2</span>][j - <span class="number">2</span>]) ||</span><br><span class="line">            (a[i][j] == a[i + <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; a[i + <span class="number">1</span>][j - <span class="number">1</span>] == a[i + <span class="number">2</span>][j - <span class="number">2</span>]))) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, a[i][j]);<span class="comment">// 有满足条件的，就输出</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 退出</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ongoing"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第 $007$ 篇题解。&lt;/p&gt;
&lt;p&gt;这道题比较水，主要考察数组 &lt;del&gt;，应该标成红题。&lt;/del&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-Analysis&quot;&gt;&lt;a href=&quot;#1-Analysis&quot; class=&quot;headerlink&quot; title=&quot;1 Analysis&quot;
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Luogu" scheme="http://blog.xrdrsp.pw/categories/Solution/Luogu/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="模拟" scheme="http://blog.xrdrsp.pw/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Codeforces 1334B</title>
    <link href="http://blog.xrdrsp.pw/2020/04/11/codeforces-1334b/"/>
    <id>http://blog.xrdrsp.pw/2020/04/11/codeforces-1334b/</id>
    <published>2020-04-10T16:00:00.000Z</published>
    <updated>2020-07-22T13:18:06.842Z</updated>
    
    <content type="html"><![CDATA[<p>本题是一个贪心题。</p><p>其实不需要暴力每种选择，只要知道何时能通过求平均得到最大的富人数就行。</p><p>可以从大到小排序，然后从前往后枚举。具体见注释。</p><p><code>reverse()</code> 的功能是求倒序。允许字符串、数组等。</p><p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, x;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);<span class="comment">// 读入。</span></span><br><span class="line">        &#125;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);<span class="comment">// 排序。</span></span><br><span class="line">        reverse(a + <span class="number">1</span>, a + n + <span class="number">1</span>);<span class="comment">// 倒序。</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum += a[i];<span class="comment">// 求和，主要用来判断是否能通过取平均使这些人都变成富人</span></span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= x * i) &#123;<span class="comment">// 判断。如果较大的 i 个的财富总和大于平均数总和（i.e. 还能继续求平均的富人），就更新 ans。</span></span><br><span class="line">                ans = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);<span class="comment">// 输出。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本题是一个贪心题。&lt;/p&gt;
&lt;p&gt;其实不需要暴力每种选择，只要知道何时能通过求平均得到最大的富人数就行。&lt;/p&gt;
&lt;p&gt;可以从大到小排序，然后从前往后枚举。具体见注释。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reverse()&lt;/code&gt; 的功能是求倒序。允许字符串、数组等。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Codeforces" scheme="http://blog.xrdrsp.pw/categories/Solution/Codeforces/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="枚举" scheme="http://blog.xrdrsp.pw/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Codeforces 1333A</title>
    <link href="http://blog.xrdrsp.pw/2020/04/09/codeforces-1333a/"/>
    <id>http://blog.xrdrsp.pw/2020/04/09/codeforces-1333a/</id>
    <published>2020-04-08T16:00:00.000Z</published>
    <updated>2020-07-22T13:18:03.657Z</updated>
    
    <content type="html"><![CDATA[<p>本题是一个规律题。手玩几个样例以后能发现一些有意思的东西。比如对于 $n$、$m$ 任意的图，都有一种固定的选取方法可以满足条件。比如这个：</p><p><img src= "/img/loading.gif" data-src="https://cdn.luogu.com.cn/upload/image_hosting/9odlxf6i.png" alt=""></p><p>图中黑色格子表示被染黑的部分，白色格子表示白色部分。（废话）</p><p>数字表示计数。即<strong>在 $6 \times 6$ 的方格里，只需要把 $i = 1$ <em>或</em> $j = 1$ 的格子染黑，就是一个合法的方案了。</strong>（注意：$(1, 1)$（左上角的格子）不算。）</p><p>对于 $n$、$m$ 任意的图也一样。读者可以自己画画看。</p><p>即：在这样的情况下，$B = n + m - 2$，$W = (n - 1) + (m - 1) - 1 = n + m - 3$，可得 $B = W + 1$。</p><p>所以就可以写代码了。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span> || j == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">"B"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">"W"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本题是一个规律题。手玩几个样例以后能发现一些有意思的东西。比如对于 $n$、$m$ 任意的图，都有一种固定的选取方法可以满足条件。比如这个：&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://cdn.luogu.co
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Codeforces" scheme="http://blog.xrdrsp.pw/categories/Solution/Codeforces/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Tricky" scheme="http://blog.xrdrsp.pw/tags/Tricky/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Codeforces 1330A</title>
    <link href="http://blog.xrdrsp.pw/2020/04/06/codeforces-1330a/"/>
    <id>http://blog.xrdrsp.pw/2020/04/06/codeforces-1330a/</id>
    <published>2020-04-05T16:00:00.000Z</published>
    <updated>2020-07-22T13:18:00.080Z</updated>
    
    <content type="html"><![CDATA[<p>由于在每次判断中不需要知道具体的名次，而只需要知道 Dreamoon 有没有达到过这个名次。所以 <code>sort()</code> 是不必要的。用 $a_i$ 存下是否达到过 $i$ 这个名次，然后按顺序判断即可。这是符合要求的</p><p>下面是 $\text{AC}$ 代码，具体见注释。</p><p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span> * N];                               <span class="comment">// 开二倍</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">int</span> n, x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x;                      <span class="comment">// 读入</span></span><br><span class="line">        <span class="keyword">int</span> k;                              <span class="comment">// 比赛名次</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;                        <span class="comment">// 加数字次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;       <span class="comment">// 读入</span></span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">            a[k] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * N; i++) &#123;  <span class="comment">// 统计</span></span><br><span class="line">            <span class="keyword">if</span> (!a[i]) &#123;                    <span class="comment">// 若第 i 名没有出现过，就把它补上，并更新计数器</span></span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt == x + <span class="number">1</span>) &#123;                  <span class="comment">// 判断补的次数是否超过限制</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;      <span class="comment">// 输出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Wish you high rating.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于在每次判断中不需要知道具体的名次，而只需要知道 Dreamoon 有没有达到过这个名次。所以 &lt;code&gt;sort()&lt;/code&gt; 是不必要的。用 $a_i$ 存下是否达到过 $i$ 这个名次，然后按顺序判断即可。这是符合要求的&lt;/p&gt;
&lt;p&gt;下面是 $\text{A
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Codeforces" scheme="http://blog.xrdrsp.pw/categories/Solution/Codeforces/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="排序" scheme="http://blog.xrdrsp.pw/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>为告别纪念，为责任前行</title>
    <link href="http://blog.xrdrsp.pw/2020/04/04/%E4%B8%BA%E5%91%8A%E5%88%AB%E7%BA%AA%E5%BF%B5%EF%BC%8C%E4%B8%BA%E8%B4%A3%E4%BB%BB%E5%89%8D%E8%A1%8C.md/"/>
    <id>http://blog.xrdrsp.pw/2020/04/04/%E4%B8%BA%E5%91%8A%E5%88%AB%E7%BA%AA%E5%BF%B5%EF%BC%8C%E4%B8%BA%E8%B4%A3%E4%BB%BB%E5%89%8D%E8%A1%8C.md/</id>
    <published>2020-04-03T16:00:00.000Z</published>
    <updated>2020-07-02T07:42:59.285Z</updated>
    
    <content type="html"><![CDATA[<p>我们在这个冬天所经历的一切，是悲伤的记忆，是告别亲人的不舍，也是坚定抗争中生命的顽强与不屈。带着逝者的遗志，我们不会被轻易击垮。严冬之后，必有万物复苏，必有夏花烂漫。</p><p>不觉间，将是清明。</p><p>对人们而言，刚刚过去的这个冬天，似乎格外漫长。突如其来的新冠肺炎疫情，让中国社会与公众的生活进入了暂停状态。壮士断腕般的“封城”举措，“全国一盘棋”式的公共卫生动员，加上史无前例的大规模隔离行动，让我们带着与病毒抗争到底的决心，度过了一段艰难时光。</p><p>春分已过，清明悄然到来。在疫情影响下，这个遥寄哀思、悼亡怀人的日子，也因此有了一层格外沉重的特殊涵义。新冠病毒夺去很多人的生命，让很多家庭痛失父母、爱人、子女。更有一些医务工作者和抗疫工作人员，为此而殉职牺牲。那许许多多的面容和身影，永远定格在了2020年初春。</p><p>我们为逝者点燃烛光，俯身鞠躬，遥寄一份哀悼和思念。在英雄的城市、英雄的人民、英雄的逆行者背后，是一个个鲜活生动的人，是一段段有着欢笑泪水的故事，他们的悲痛，他们的哀伤，他们的抗争，他们的不屈，都值得铭记。</p><p>那不只是一个数字，一个名字，一块碑。每一个逝者的过往，都是生者的哀思。疫情防控的特殊时刻，许多人将无法去墓地祭扫，那些逝去的微笑，那些生前的故事，那些诉说与倾听，那些牵挂与想念，在清明这个日子里，隔着或远或近的距离，慢慢地回忆，轻轻地触摸。</p><p>告别，为了逝者，亦为生者。对逝者而言，最好的怀念是记得，也是放下——告别伤痛，战胜疫情，回归正常生活，更好地活着。如此，才能告慰逝去的亲人；如此，才能让抗疫牺牲者安息。离去的亲人，希望每一个生者幸福健康；奉献生命的勇士，将生的美好给予他人。坚强、更有意义地活着，是每一个生者的责任。</p><p>清明既是寄托哀思的日子，也是走向新生的日子。春回大地，生机勃发，我们带着对逝者的思念，迎候生命的生生不息。经历了严冬和病毒的封锁，春天来临，生活回归，被迫暂停的城市开始运转，社会逐渐步入常态。阳光里，路边的店铺一间间重新开业，城市的大街小巷，慢慢恢复往常的喧闹与拥挤。这些我们再熟悉不过的“日常”，在经历困境之后，变得珍贵。作为生者的我们，用心过好这得来不易的平常日子，才是对逝者最好的怀念。</p><p>在珍惜、过好眼下生活的同时，我们也要看到，尽管国内整体态势向好，但离彻底战胜新冠病毒尚有一段“决胜距离”，况且世界各地的疫情正在加剧。“外防输入，内防反弹”，防控工作丝毫不能松懈。与此同时，复产复工、保障经济生活回归正轨也面临不小压力。此时，唯有将悲痛凝聚为斗志与力量，我们才能最终战胜疫情。取得抗疫斗争的最后胜利，是我们对逝去亲人最好的安慰，也是对那些牺牲者最好的交代。</p><p>清明节的到来，凝聚了我们深沉的哀思，也意味着春天真正来临。我们在这个冬天所经历的一切，是悲伤的记忆，是告别亲人的不舍，也是坚定抗争中生命的顽强与不屈。带着逝者的遗志，我们不会被轻易击垮。严冬之后，必有万物复苏，必有夏花烂漫。</p><p><strong>燃一缕思念的烛火，愿逝者安息；带着思念前行，愿生者坚强。</strong></p><p>综合：新华视点、中国青年报<br>原标题：《2020年4月4日，全国哀悼》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在这个冬天所经历的一切，是悲伤的记忆，是告别亲人的不舍，也是坚定抗争中生命的顽强与不屈。带着逝者的遗志，我们不会被轻易击垮。严冬之后，必有万物复苏，必有夏花烂漫。&lt;/p&gt;
&lt;p&gt;不觉间，将是清明。&lt;/p&gt;
&lt;p&gt;对人们而言，刚刚过去的这个冬天，似乎格外漫长。突如其来的新
      
    
    </summary>
    
    
      <category term="DailyLife" scheme="http://blog.xrdrsp.pw/categories/DailyLife/"/>
    
    
      <category term="生活" scheme="http://blog.xrdrsp.pw/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Codeforces 1332A</title>
    <link href="http://blog.xrdrsp.pw/2020/04/02/codeforces-1332a/"/>
    <id>http://blog.xrdrsp.pw/2020/04/02/codeforces-1332a/</id>
    <published>2020-04-01T16:00:00.000Z</published>
    <updated>2020-07-22T13:17:58.205Z</updated>
    
    <content type="html"><![CDATA[<p>这是本人的第 $003$ 篇题解。</p><p>这个题作为 CF div.2 T1，还是比较水的（我比较菜）。</p><p>数据范围 $10^8$，暴力搜索肯定不行。</p><p>这时就要想一些省时间的方法了。</p><p>首先，可以模拟样例找规律。</p><p>可以发现，只要小猫有足够的活动空间（走完要求的路线之后还在区域内）就不会走丢。且小猫至少有 $1\times1$ 的空间（除非不需要走路）。</p><p>所以就可以写代码了。</p><p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r, d, u; <span class="comment">// 左、右、下、上。</span></span><br><span class="line">        <span class="keyword">int</span> x, y, x1, x2, y1, y2;<span class="comment">// 小猫位置坐标和两个限制坐标。</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;l, &amp;r, &amp;d, &amp;u);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>, &amp;x, &amp;y, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        x = r - l + x;<span class="comment">// 计算：小猫在走完要求的路线后在不在规定的范围里。（x 坐标）</span></span><br><span class="line">        y = u - d + y;<span class="comment">// 计算：小猫在走完要求的路线后在不在规定的范围里。（y 坐标）</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt;= x1 &amp;&amp; x &lt;= x2 &amp;&amp;</span><br><span class="line">        y &gt;= y1 &amp;&amp; y &lt;= y2 &amp;&amp; <span class="comment">// 判断走完后还在范围里。</span></span><br><span class="line">        (x2 &gt; x1 || l + r == <span class="number">0</span>) &amp;&amp;</span><br><span class="line">        (y2 &gt; y1 || u + d == <span class="number">0</span>)) &#123;<span class="comment">// 判断是否有空间。l + r == 0 和 u + d == 0 分别表示 l == 0 &amp;&amp; r == 0 和 u == 0 &amp;&amp; d == 0。因为 l、r、d、u 均为非负整数。</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes\n"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是本人的第 $003$ 篇题解。&lt;/p&gt;
&lt;p&gt;这个题作为 CF div.2 T1，还是比较水的（我比较菜）。&lt;/p&gt;
&lt;p&gt;数据范围 $10^8$，暴力搜索肯定不行。&lt;/p&gt;
&lt;p&gt;这时就要想一些省时间的方法了。&lt;/p&gt;
&lt;p&gt;首先，可以模拟样例找规律。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Codeforces" scheme="http://blog.xrdrsp.pw/categories/Solution/Codeforces/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Tricky" scheme="http://blog.xrdrsp.pw/tags/Tricky/"/>
    
  </entry>
  
  <entry>
    <title>My Code Style for OI</title>
    <link href="http://blog.xrdrsp.pw/2020/04/01/codestyle/"/>
    <id>http://blog.xrdrsp.pw/2020/04/01/codestyle/</id>
    <published>2020-03-31T16:00:00.000Z</published>
    <updated>2020-07-02T09:24:11.543Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍 xrdrsp 的 OI 中的代码规范。其来源主要为 <a href="https://studyingfather.blog.luogu.org/code-style" target="_blank" rel="noopener">Studying Father 的代码规范</a>、<a href="https://rqy.moe/uncategorized/rqy-s-Code-Style-for-OI/" target="_blank" rel="noopener">_rqy 的代码规范</a>、<a href="https://oi.men.ci/code-style-oi/" target="_blank" rel="noopener">Menci 的代码规范</a></p></blockquote><h1 id="0-可能用到的词语解释"><a href="#0-可能用到的词语解释" class="headerlink" title="0 可能用到的词语解释"></a>0 可能用到的词语解释</h1><ul><li><strong>必须</strong>：任何时候均要遵循的规范。</li><li><strong>应该</strong>：绝大多数正常情况下要遵循的规范，只允许在少数特殊情形下出现例外。</li><li><strong>只能</strong>：不能采用其他规范。</li><li><strong>推荐</strong>：这一规范符合通行规则，正常范围下优先使用。</li><li><strong>可以/允许</strong>：非强制性的规范，可以视情况实施。</li><li><strong>不应/不推荐</strong>：因为不符合通行规则，而在大多数情况下不使用该规则。</li><li><strong>禁止</strong>：任何时候均不能使用的规则。</li></ul><hr><h1 id="1-编译预处理指令"><a href="#1-编译预处理指令" class="headerlink" title="1 编译预处理指令"></a>1 编译预处理指令</h1><ul><li><code>#include</code> 语句<strong>必须</strong>置于程序开头。</li><li>多个库的顺序<strong>应该</strong>遵循如下原则：首先是自定义库，接下来是 <code>C++</code> 库，最后是 <code>C</code> 库。其中 <code>C</code> 库和 <code>C++</code> 库禁止使用 <code>#include &quot;foo&quot;</code> ，而必须使用 <code>#include &lt;foo&gt;</code> 。</li><li><strong>禁止</strong>使用万能头文件。</li><li><code>#define</code> <strong>不推荐</strong>用于定义常量等，定义常量用 <code>const</code>。<code>#define</code> <strong>可以</strong>替代 <code>typedef</code> 等。</li><li>禁止使用 <code>#define</code> 来代替函数定义，以及缩写控制性语句。</li><li>所有编译预处理指令<strong>不应</strong>缩进。</li></ul><hr><h1 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h1><h2 id="2-1-缩进"><a href="#2-1-缩进" class="headerlink" title="2.1 缩进"></a>2.1 缩进</h2><ul><li><strong>必须</strong>采用 $ 4 $ 格缩进，且<strong>应该</strong>使用空格代替缩进。（见下）</li></ul><hr><h2 id="2-2-空格及换行"><a href="#2-2-空格及换行" class="headerlink" title="2.2 空格及换行"></a>2.2 空格及换行</h2><ul><li><p>花括号<strong>不应该</strong>换行。</p></li><li><p><strong>不可以</strong>省略任何花括号，包括但不限于以下情况：</p><ul><li><code>if</code> 语句后只跟随一条语句。这时<strong>不可以</strong>把 <code>if</code> 语句和要执行的语句写在同一行，且遵循缩进原则，<strong>必须</strong>加上花括号。</li><li><code>for</code> 或 <code>while</code> 语句内只执行一条语句，这时也<strong>必须</strong>将要执行的语句另起一行，且遵循缩进原则，<strong>必须</strong>加上花括号。</li></ul></li><li><p>以下情况<strong>必须</strong>加空格：</p><ul><li>双目运算符两侧。（<code>,</code> 例外，见下）</li><li><code>,</code> 及 <code>;</code> 的右边（如果其不处于行尾）。</li><li><code>if</code>、<code>for</code>、<code>while</code> 等控制流关键字与其后的左括号之间。</li><li><code>do-while</code> 中的 <code>while</code>、<code>if-else</code> 中的 <code>else</code> 与其前面的右花括号之间。</li><li><code>do-while</code> 中的 <code>do</code> 与其后的左花括号之间。</li><li>结构体名与其后的左花括号之间。</li><li>结构体的右花括号与结构体变量名之间。</li><li>所有左大括号的左侧。（表示注释的大括号除外）</li><li><code>?</code>、<code>:</code> 的两侧。</li><li>类型中 <code>*</code>、<code>&amp;</code> 的左侧。（如：<code>const int &amp;a, int A(int *&amp;a)</code>）</li><li>常成员函数的 <code>const</code> 两侧。</li></ul></li><li><p>以下情况<strong>禁止</strong>加空格：</p><ul><li>小括号及中括号与其内部的表达式或参数列表之间。</li><li>函数名与左括号之间（包括声明/定义/使用）。（<code>operator</code> 与所要重载的运算符之间、运算符与参数列表之间例外，<strong>必须</strong>加空格）</li><li>单目运算符（<code>!</code>、<code>-</code>、<code>*</code>、<code>&amp;</code>、<code>~</code>）之后（或自增自减运算符与其操作数之间）。</li><li><code>,</code> 及 <code>;</code> 的左侧。</li><li>类型中 <code>*</code>、<code>&amp;</code> 的右侧。</li><li><code>.</code> 的两侧。</li><li><code>operator</code> 与所要重载的运算符之间。</li><li><code>-&gt;</code>、<code>::</code> 的两侧。</li></ul></li><li><p>若表达式过长内部<strong>必须</strong>换行，运算符处于行首（而非行尾）；不缩进；换行的优先级较高的子表达式也<strong>应该</strong>加括号以避免误读。</p></li><li>参数列表/初始化列表过长时内部<strong>必须</strong>换行，逗号处于行尾；缩四空格。</li><li>任何函数<strong>禁止</strong>写到一行。</li><li>一系列常量定义的上下<strong>应该</strong>有空行。</li><li>语句之间<strong>应该</strong>根据其意义酌情空行。</li><li>任何位置<strong>禁止</strong>出现连续的两个（或以上）空行。</li><li>函数或结构体等定义两侧<strong>必须</strong>有空行。</li></ul><h1 id="3-例子"><a href="#3-例子" class="headerlink" title="3 例子"></a>3 例子</h1><p>建议使用例子（代码来自 @Dovuq）：</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">3e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bigint</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num[N];</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    bigint() &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">bigint a[M];</span><br><span class="line">bigint ans;</span><br><span class="line"></span><br><span class="line"><span class="function">bigint <span class="title">calc</span><span class="params">(bigint x, bigint y)</span></span>;</span><br><span class="line"></span><br><span class="line">istream &amp;<span class="keyword">operator</span> &gt;&gt;(istream &amp;is, bigint &amp;x) &#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (; n; i++) &#123;</span><br><span class="line">        x.num[i] = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x.size = i;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span> &lt;&lt;(ostream &amp;os, bigint x) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x.size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        os &lt;&lt; x.num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ans = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ans = calc(ans, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bigint <span class="title">calc</span><span class="params">(bigint x, bigint y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.size &lt; y.size) &#123;</span><br><span class="line">        swap(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    bigint c;</span><br><span class="line">    c.size = x.size;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.size; i++) &#123;</span><br><span class="line">        c.num[i] += x.num[i] + y.num[i] + d;</span><br><span class="line">        d = (c.num[i] &lt; <span class="number">7</span> ? <span class="number">0</span> : (c.num[i] &lt; <span class="number">14</span> ? <span class="number">1</span> : <span class="number">2</span>));</span><br><span class="line">        c.num[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d) &#123;</span><br><span class="line">        c.num[c.size++] = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文介绍 xrdrsp 的 OI 中的代码规范。其来源主要为 &lt;a href=&quot;https://studyingfather.blog.luogu.org/code-style&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stu
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.xrdrsp.pw/categories/Code/"/>
    
    
      <category term="生活" scheme="http://blog.xrdrsp.pw/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Luogu P6244</title>
    <link href="http://blog.xrdrsp.pw/2020/03/30/luogu-p6244/"/>
    <id>http://blog.xrdrsp.pw/2020/03/30/luogu-p6244/</id>
    <published>2020-03-29T16:00:00.000Z</published>
    <updated>2020-07-22T13:17:55.196Z</updated>
    
    <content type="html"><![CDATA[<p>这是本人的第 $002$ 篇题解。</p><hr><h2 id="1-题意简述"><a href="#1-题意简述" class="headerlink" title="1 题意简述"></a>1 题意简述</h2><p>有 $n$ 个事件，要求在时间不冲突的情况下完成尽量多的事件。（完成一个事件后可以立即开始下一个事件。）</p><h2 id="2-思路分析"><a href="#2-思路分析" class="headerlink" title="2 思路分析"></a>2 思路分析</h2><p>这道题就是个贪心题。</p><p>贪心，是一种<strong>仅考虑当前决策、不顾全大局</strong>的思想，与 DP（动态规划）正好相反。正因为如此，许多贪心代码很短，许多贪心代码都是错的。</p><p>在这道题上，我们该根据什么贪心呢？下面有几个选择，我们需要选出正确的。判别贪心正确与否的方法是找反例和证明。</p><ol><li>先做早开始的事件。</li><li>先做持续时间短的事件。</li><li>先做早结束的事件。</li></ol><p>或许你认为还有别的可能性，但这里只列举 $3$ 个。</p><p>下面是这三种贪心的证明过程。</p><h3 id="2-1-先做早开始的事件"><a href="#2-1-先做早开始的事件" class="headerlink" title="2.1 先做早开始的事件"></a>2.1 先做早开始的事件</h3><p>表面看看很正确，但如果一个事件开始的时间很早，而持续时间很长，那这个算法就爆炸了。<strong>举出反例</strong>：</p><p>输入：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 100</span><br><span class="line">2 1</span><br><span class="line">3 1</span><br></pre></td></tr></table></figure></p><p>正确的输出：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></p><p>对“先做早开始的事件”贪心的输出：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></p><p>所以明显地 <code>WA</code> 了。应该先做 <code>2</code>，再做 <code>3</code>，而根据这个算法，程序认为 <code>1</code> 开始的时间早，这样 $100$ 时间过去了，只做了一个事件，忽略了 <code>2</code> 和 <code>3</code>。所以这种算法是错误的。</p><h3 id="2-2-先做持续时间短的事件"><a href="#2-2-先做持续时间短的事件" class="headerlink" title="2.2 先做持续时间短的事件"></a>2.2 先做持续时间短的事件</h3><p>吸取了上一次的教训，发现事件的持续时间很重要。那么，先做持续时间短的事件是否可行呢？</p><p>看看也十分正确，但仍然可以轻松举出反例。</p><p>输入：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 100</span><br><span class="line">2 2</span><br><span class="line">4 1</span><br><span class="line">5 2</span><br></pre></td></tr></table></figure></p><p>正确的输出：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></p><p>对“先做持续时间短的事件”贪心的输出：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></p><p>所以又明显地 <code>WA</code> 了。应该先做 <code>2</code>，再做 <code>3</code>，再做 <code>4</code>，而根据这个算法，程序认为 <code>3</code> 持续的时间短，但先做 <code>2</code> 就多做了一件事情。所以这种算法是错误的。</p><h3 id="2-3-先做结束时间早的事件"><a href="#2-3-先做结束时间早的事件" class="headerlink" title="2.3 先做结束时间早的事件"></a>2.3 先做结束时间早的事件</h3><p>吸取了上一次的教训，发现事件的结束时间很重要。那么，先做结束时间早的事件是否可行呢？</p><p>看看也十分正确，实际上也十分正确。</p><p>为什么呢？</p><p>当一个事件结束得较早时，它便为下一个事件留下了更多的时间，就能做更多的事件。所以明显正确。</p><p>也举不出反例了。（读者可以自己试试。）</p><h2 id="3-算法流程"><a href="#3-算法流程" class="headerlink" title="3 算法流程"></a>3 算法流程</h2><p>清晰明了。有了 1 的阅读基础，可以得出：先按照结束时间排序，再一个个地判断能否参加。</p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4 代码实现"></a>4 代码实现</h2><p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span>           <span class="comment">// 定义结构体，存储的是每个事件</span></span><br><span class="line">    <span class="keyword">int</span> start;          <span class="comment">// 事件的开始时间</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">end</span>;            <span class="comment">// 事件的结束时间</span></span><br><span class="line">    <span class="keyword">int</span> last;           <span class="comment">// 事件的持续时间</span></span><br><span class="line">&#125; event[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Node i, Node j) &#123;</span><br><span class="line">    <span class="comment">// 重载运算符，用来对结构体排序。</span></span><br><span class="line">    <span class="comment">// 除此之外，常用的对结构体排序的方法还有自定义比较函数。不懂的可以百度。</span></span><br><span class="line">    <span class="keyword">return</span> i.<span class="built_in">end</span> &lt; j.<span class="built_in">end</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;  <span class="comment">// 读入</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;event[i].start, &amp;event[i].last);</span><br><span class="line">        event[i].<span class="built_in">end</span> = event[i].start + event[i].last;  <span class="comment">// 计算结束时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    sort(event + <span class="number">1</span>, event + n + <span class="number">1</span>); <span class="comment">// 排序</span></span><br><span class="line">    <span class="comment">// 下面遍历每个事件，判断开始时间是否在做的上一个事件的结束时间后。</span></span><br><span class="line">    <span class="keyword">int</span> cur = event[<span class="number">1</span>].<span class="built_in">end</span>;         <span class="comment">// 做完这些选择的事件的结束时间。第一个事件肯定做。</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (event[i].start &gt;= cur) &#123;<span class="comment">// 判断。</span></span><br><span class="line">            ans++;</span><br><span class="line">            cur = event[i].<span class="built_in">end</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>这道题用了贪心的思想。这个思想不能随便用，需要证明其正确性或举出反例。这样才能保证不出错。</p><p>贪心的思维过程很重要。您在必要的时候可以画图或列式子。如本题，您可以把每个事件的开始和结束的时间连起来简化成线段，一起画到数轴上，整体地观看便于思考。</p><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6 其他"></a>6 其他</h2><p>这篇题解纯手打（废话），如有任何错误或不妥之处请评论。谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是本人的第 $002$ 篇题解。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-题意简述&quot;&gt;&lt;a href=&quot;#1-题意简述&quot; class=&quot;headerlink&quot; title=&quot;1 题意简述&quot;&gt;&lt;/a&gt;1 题意简述&lt;/h2&gt;&lt;p&gt;有 $n$ 个事件，要求在时间不冲突的情况下完成
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Luogu" scheme="http://blog.xrdrsp.pw/categories/Solution/Luogu/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="贪心" scheme="http://blog.xrdrsp.pw/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>[Solution] Luogu P2433</title>
    <link href="http://blog.xrdrsp.pw/2020/03/27/luogu-p2433/"/>
    <id>http://blog.xrdrsp.pw/2020/03/27/luogu-p2433/</id>
    <published>2020-03-26T16:00:00.000Z</published>
    <updated>2020-07-22T13:17:51.834Z</updated>
    
    <content type="html"><![CDATA[<p>这是本蒟蒻的第 $001$ 篇题解。</p><p>Posted on Sun Mar 15, at 21:04:00</p><p>upd on Mon Mar 16, at 07:02:41 （更改了少数部分。）</p><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h3><p>输出 <code>I love Luogu!</code>。直接输出即可。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"I love Luogu!"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题 2"></a>问题 2</h3><ol><li>由于小 A 和 Uim 分别拿走了 $2$、$4$ 个，则他们一共拿走了 $2 + 4 = 6$ 个。</li><li>由于在 <code>1</code> 中，我们算出来小 A 和 Uim 共拿走了 $6$ 个，则八尾勇拿走了 $ 10 - 6 = 4$ 个。</li></ol><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, <span class="number">2</span> + <span class="number">4</span>, <span class="number">10</span> - <span class="number">2</span> - <span class="number">4</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题 3"></a>问题 3</h3><p>这个问题考察我们对 cpp 中 <code>int</code> 的理解。当两个整形变量做除法时，若无法整除，则<strong>向下取整</strong>。如 <code>14 / 4</code> 的结果为 <code>3</code>。</p><p>所以可以尽情地使用整形变量的除法了。</p><ol><li>$\dfrac{\text{总苹果数}}{\text{同学数}}$ 即为答案。</li><li>$\text{同学数} \times \text{每个同学分的苹果数}$ 即为答案。</li><li>$\text{总苹果数} - \text{分出去的苹果数}$ 即为答案。</li></ol><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">14</span>, b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d\n%d"</span>, a / b, (a / b) * b, a - (a / b) * b);</span><br></pre></td></tr></table></figure></p><h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题 4"></a>问题 4</h3><p>$500 / 3$ 即为答案。由于<strong>保留 $6$ 位有效数字</strong>，得到 $500 / 3 \approx 166.667$，输出这个数即可。</p><p>注：<code>%.3lf</code> 表示保留三位小数的<code>double</code>浮点数。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lf"</span>, <span class="number">166.667</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-5"><a href="#问题-5" class="headerlink" title="问题 5"></a>问题 5</h3><p>相遇问题。</p><p>仔细观察（画图）可得知，是两列火车的车尾在相遇。所以，$S = 260 + 220 = 480$，$v = 12 + 20 = 32$。根据公式得到 $t = \dfrac{S}{v} = 15$。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"15"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-6"><a href="#问题-6" class="headerlink" title="问题 6"></a>问题 6</h3><p><strong>注意保留 $6$ 位有效数字！</strong> 坑了我好久。</p><p>根据勾股定理 $a^2 + b^2 = c^2$，代入即可。</p><p>手算得到整数部分是 $10$（两位数），所以需要保留四位小数。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"10.8167"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-7"><a href="#问题-7" class="headerlink" title="问题 7"></a>问题 7</h3><p>简单的模拟。</p><ol><li>$100 + 10 = 110$</li><li>$110 - 20 = 90$</li><li>剩 $0$ 元。</li></ol><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"110\n90\n0"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-8"><a href="#问题-8" class="headerlink" title="问题 8"></a>问题 8</h3><p><strong>注意保留 $6$ 位有效数字！</strong></p><p>先明确公式：</p><ol><li>圆的周长：$C = \pi d = 2 \pi r$；</li><li>圆的面积：$S = \pi r^2$；</li><li>球的体积：$V = \frac{4}{3}\pi r^3$。</li></ol><p>就可以通过套公式来得到结果啦！</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"31.4159\n78.5398\n523.599"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-9"><a href="#问题-9" class="headerlink" title="问题 9"></a>问题 9</h3><p>数学题；倒着推。</p><p>由于最后剩下一个，猴子贪吃了一个，除了这两个以外桃子的数量是总数量的一半，所以原苹果数为：$(1 + 1) \times 2 = 4$ 个。</p><p>以此类推，得到总苹果数是 $22$ 个。</p><div class="table-container"><table><thead><tr><th style="text-align:right">天数</th><th style="text-align:right">苹果个数</th></tr></thead><tbody><tr><td style="text-align:right">1</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">4</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">10</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">22</td></tr></tbody></table></div><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"22"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-10"><a href="#问题-10" class="headerlink" title="问题 10"></a>问题 10</h3><p>答案是 $9$。并不可能是别的。如果 $&gt; 10$，则评测时间将会 $&lt; 6 \operatorname{min}$；如果 $&lt; 8$，则评测时间将会 $&gt; 30 \operatorname{min}$。</p><p>所以直接输出。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"9"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-11"><a href="#问题-11" class="headerlink" title="问题 11"></a>问题 11</h3><p><strong>注意保留 $6$ 位有效数字！</strong></p><p>追及问题。</p><p>有公式 $t = \dfrac{S}{v_1 - v_2}$，代入即可。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"33.3333"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-12"><a href="#问题-12" class="headerlink" title="问题 12"></a>问题 12</h3><p>通过数数，得：</p><ol><li>答案为 $13$；</li><li>答案为 $R$。</li></ol><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"13\nR"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-13"><a href="#问题-13" class="headerlink" title="问题 13"></a>问题 13</h3><p>问题 10 说了球的体积公式为 $V = \frac{4}{3}\pi r^3$。所以先求出两个球的体积分别约为 $268.082603$ 和 $4188.790667$，相加得 $4456.873270$，立方根得 $ 16.456725\cdots$，向下取整得 $ 16 $。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"16"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="问题-14"><a href="#问题-14" class="headerlink" title="问题 14"></a>问题 14</h3><div class="table-container"><table><thead><tr><th style="text-align:right">定价</th><th style="text-align:right">报名人数</th></tr></thead><tbody><tr><td style="text-align:right">$ \cdots $</td><td style="text-align:right">$\cdots$</td></tr><tr><td style="text-align:right">$108$</td><td style="text-align:right">$12$</td></tr><tr><td style="text-align:right">$109$</td><td style="text-align:right">$11$</td></tr><tr><td style="text-align:right">$110$</td><td style="text-align:right">$10$</td></tr><tr><td style="text-align:right">$111$</td><td style="text-align:right">$9$</td></tr><tr><td style="text-align:right">$112$</td><td style="text-align:right">$8$</td></tr><tr><td style="text-align:right">$ \cdots $</td><td style="text-align:right">$\cdots$</td></tr></tbody></table></div><p>得到，当定价为 $ x $ 元时，报名人数为 $120 - x$ 人。这时，总共能收到 $x \times (120 - x)$ 元。我们使它等于 $ 3500 $ 即可。</p><p>列方程：$x \times (120 - x) = 3500$，展开得 $ - x^2 + 120x - 3500 = 0$，利用十字相乘得<br>$\begin{cases}x_1 = 50 \\ x_2 = 70\end{cases}$</p><p>取较小值即 $50$。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"50"</span>);</span><br></pre></td></tr></table></figure></p><hr><p>讲完了！下面是完整代码。</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"I love Luogu!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n%d\n%d"</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.3lf"</span>, <span class="number">500</span> * <span class="number">1.0</span> / <span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"15"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"10.8167"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">7</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"110\n90\n0"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"31.4159\n78.5398\n523.599"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"22"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"9"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">11</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"33.3333"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"13\nR"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"16"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T == <span class="number">14</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"50"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如有问题请在博客留言。</p><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是本蒟蒻的第 $001$ 篇题解。&lt;/p&gt;
&lt;p&gt;Posted on Sun Mar 15, at 21:04:00&lt;/p&gt;
&lt;p&gt;upd on Mon Mar 16, at 07:02:41 （更改了少数部分。）&lt;/p&gt;
&lt;h3 id=&quot;问题-1&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Solution" scheme="http://blog.xrdrsp.pw/categories/Solution/"/>
    
      <category term="Luogu" scheme="http://blog.xrdrsp.pw/categories/Solution/Luogu/"/>
    
    
      <category term="题解" scheme="http://blog.xrdrsp.pw/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Mathematics Tools</title>
    <link href="http://blog.xrdrsp.pw/2020/03/09/Mathematics-Tools/"/>
    <id>http://blog.xrdrsp.pw/2020/03/09/Mathematics-Tools/</id>
    <published>2020-03-09T08:20:31.000Z</published>
    <updated>2020-07-02T09:18:34.521Z</updated>
    
    <content type="html"><![CDATA[<b>函数求导工具</b><br><form name="form1" action="http://zh.numberempire.com/derivativecalculator.php" method="post">函数输入框:<br><input name="function" size="80" maxlength="300" type="text"><br>自变量: <input name="var" size="3" maxlength="3" value="x" type="text">    阶数: <select name="order"><option value="0">0</option><option value="1" selected="selected">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option></select><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>不定积分计算器</b><br><form name="form1" action="http://zh.numberempire.com/integralcalculator.php" method="post">请输入你需要积分的函数表达式:<br><input name="function" size="80" maxlength="160" value="" type="text"><br>自变量:<input name="var" size="3" maxlength="3" value="x" type="text">    <input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>定积分计算器</b><br><form name="form1" action="http://zh.numberempire.com/definiteintegralcalculator.php" method="post">请输入你需要积分的函数表达式:<br><input name="function" size="80" maxlength="160" value="" type="text"><br>自变量: <input name="var" size="3" maxlength="3" value="x" type="text">从: <input name="a" size="12" maxlength="12" value="0" type="text">到: <input name="b" size="12" maxlength="12" value="1" type="text"><input size="40" name="answers" value="" type="hidden"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>极限计算器</b><br><form name="form1" action="http://zh.numberempire.com/limitcalculator.php" method="post">请输入一个函数并计算极限:<input name="function" size="80" maxlength="160" value="" type="text"><br>极限变量: <input name="var" size="3" maxlength="3" value="x" type="text">    x趋向于: <input name="val" size="12" maxlength="12" value="0" type="text">    <input size="40" name="answers" value="" type="hidden">极限类型 <select name="limit_type"><option value="two-sided">双侧极限</option><option value="plus">右侧极限</option><option value="minus">左侧极限</option></select><input name="return" value="1" type="hidden"><input value="计算" type="submit"></form><b>分数计算器</b><br><form name="form1" action="http://zh.numberempire.com/fractionscalculator.php" method="post">输入一个分数表达式:<br><input name="function" size="80" maxlength="160" value="" type="text"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>方程求解</b><br><form name="form1" action="http://zh.numberempire.com/equationsolver.php" method="post">输入逗号以分隔多个方程:<br><input name="function" size="80" maxlength="160" value="" type="text"><br><input name="var" size="10" maxlength="10" value="x" type="text"><input size="40" name="answers" value="" type="hidden"><input value="求解" type="submit"><input name="return" value="1" type="hidden"></form><b>表达式化简</b><br><form name="form1" action="http://zh.numberempire.com/simplifyexpression.php" method="post">输入一个表达式来简化:<br><input name="function" size="80" maxlength="300" value="" type="text"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>因式分解工具</b><br><form name="form1" action="http://zh.numberempire.com/factoringcalculator.php" method="post">请输入您需要分解因式的表达式：:<br><input name="function" size="80" maxlength="300" value="" type="text"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>反函数计算器</b><br><form name="form1" action="http://zh.numberempire.com/inversefunctioncalculator.php" method="post">输入函数来计算其反函数:<br><input name="function" size="80" maxlength="160" value="" type="text"><br><input name="var" size="10" maxlength="10" value="x" type="text"><input size="40" name="answers" value="" type="hidden"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>表达式计算器</b><br><form name="form1" action="http://zh.numberempire.com/expressioncalculator.php" method="post">输入要计算的表达式:<br><input name="function" size="80" maxlength="300" value="" type="text"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>矩阵计算器</b><br><form name="form1" action="http://zh.numberempire.com/matrixcalculator.php" method="post">输入矩阵 A:<br><textarea type="text" name="matrix1" cols="60" rows="20"></textarea><table><tbody><tr><td><input name="determinant" checked="checked" type="checkbox"> 矩阵的行列式</td><td><input name="transpose" checked="checked" type="checkbox"> 转置矩阵</td></tr><tr><td><input name="trace" checked="checked" type="checkbox"> 矩阵迹</td><td><input name="rank" checked="checked" type="checkbox"> 矩阵的秩</td></tr><tr><td><input name="inverse" type="checkbox"> 逆矩阵</td><td><input name="eigenvalues" type="checkbox"> 特征值</td></tr><tr><td><input name="triangularize" type="checkbox"> 下三角矩阵</td><td><input name="square" type="checkbox"> A<sup>2</sup></td></tr></tbody></table><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>矩阵运算</b><br><form name="form1" action="http://zh.numberempire.com/matrixbinarycalculator.php" method="post"><table><tbody><tr align="center"><td>输入矩阵 A:</td><td>输入矩阵 B:</td></tr><tr><td><textarea type="text" name="matrix1" cols="60" rows="20"></textarea></td><td><textarea type="text" name="matrix2" cols="60" rows="20"></textarea></td></tr></tbody></table><br><table><tbody><tr><td><input name="add" checked="checked" type="checkbox">加法</td><td><input name="sub" checked="checked" type="checkbox">减法</td><td><input name="mult" checked="checked" type="checkbox">乘法</td></tr></tbody></table><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>质数发生器和校验器</b><br><form name="form1" action="http://zh.numberempire.com/primenumbers.php" method="post">输入一个自然数，并选择相应的功能:<br><input name="number" size="80" maxlength="128" value="" type="text"><br><select name="action"><option value="check" selected="selected">检验是否为质数</option><option value="next">下一个质数</option><option value="prev">上一个质数</option></select><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>整数分解工具</b><br><form name="form1" action="http://zh.numberempire.com/numberfactorizer.php" method="post">请输入您需要分解的整数:<br><input name="number" size="80" maxlength="60" value="" type="text"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>斐波那契数计算工具</b><br><form name="form1" action="http://zh.numberempire.com/fibonaccinumbers.php" method="post">请输入一个非负整数:<br><input name="number" size="40" maxlength="10" value="" type="text"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>伯努利数发生器</b><br><form name="form1" action="http://zh.numberempire.com/bernoullinumbers.php" method="post">请输入一个非负整数:<br><input name="number" size="40" maxlength="10" value="" type="text"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>欧拉数计算工具</b><br><form name="form1" action="http://zh.numberempire.com/eulernumbers.php" method="post">请输入一个非负整数:<br><input name="number" size="40" maxlength="10" value="" type="text"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>阶乘计算器</b><br><form name="form1" action="http://zh.numberempire.com/factorialcalculator.php" method="post">请输入一个非负整数:<br><input name="number" size="40" maxlength="10" value="" type="text"><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>组合数计算器</b><br><form action="http://zh.numberempire.com/combinatorialcalculator.php" method="post">组合数计算方法，从N项中选出M项.<table><tbody><tr><td align="right">是否具有顺序?</td><td><select name="ordered"><option value="true">是</option><option value="false" selected="selected">否</option></select></td></tr><tr><td align="right">元素是否可以选择一次以上?</td><td><select name="repeated"><option value="ture">是</option><option value="false" selected="selected">否</option></select></td></tr><tr><td align="right">N = </td><td><input name="n" size="8" type="text"></td></tr><tr><td align="right">M =</td><td><input name="m" size="8" type="text"></td></tr></tbody></table><input value="计算"  type="submit"><input name="return" value="1" type="hidden"></form><b>统计计算器</b><br><form name="form1" action="http://zh.numberempire.com/statisticscalculator.php" method="post">输入一个空格，逗号或新行分隔的数字:<br><textarea type="text" name="series" cols="60" rows="20"></textarea><br><table><tbody><tr><td><input name="mean" checked="checked" type="checkbox">平均数</td><td><input name="median" type="checkbox">中位数</td><td><input name="harmonic_mean" type="checkbox">调和平均数</td></tr><tr><td><input name="geometric_mean" type="checkbox">几何平均数</td><td><input name="min" type="checkbox">最小</td><td><input name="max" type="checkbox">最大</td></tr><tr><td><input name="range" type="checkbox">范围</td><td><input name="var" checked="checked" type="checkbox">方差</td><td><input name="var1" type="checkbox">更正方差</td></tr><tr><td><input name="std" type="checkbox">标准偏差</td><td><input name="std1" type="checkbox">更正的标准偏差</td><td><input name="relstd" type="checkbox">变异系数</td></tr><tr><td><input name="mean_dev" type="checkbox">平均偏差</td><td><input name="median_dev" type="checkbox">中位数偏差</td><td><input name="skewness" checked="checked" type="checkbox">偏度</td></tr></tbody></table><input value="计算" type="submit"><input name="return" value="1" type="hidden"></form><b>函数图像绘制工具</b><br>函数输入框:<br><form name="form1" action="http://zh.numberempire.com/graphingcalculator.php" method="get"><input id="functions" name="functions" value="log(x),sqrt(x),x,x^2" class="full_width" type="text"><br>X 坐标, 从: <input id="xmin" name="xmin" value="0" size="10" type="text">到: <input id="xmax" name="xmax" value="3" size="10" type="text"><br>Y 坐标, 从: <input id="ymin" name="ymin" value="-1" size="10" type="text">到: <input id="ymax" name="ymax" value="1" size="10" type="text"><br><input value="绘制图像" type="submit"><input name="return" value="1" type="hidden"></form>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;b&gt;函数求导工具&lt;/b&gt;&lt;br&gt;
&lt;form name=&quot;form1&quot; action=&quot;http://zh.numberempire.com/derivativecalculator.php&quot; method=&quot;post&quot;&gt;
函数输入框:&lt;br&gt;
&lt;input name=&quot;fu
      
    
    </summary>
    
    
      <category term="Mathematics" scheme="http://blog.xrdrsp.pw/categories/Mathematics/"/>
    
      <category term="Tools" scheme="http://blog.xrdrsp.pw/categories/Mathematics/Tools/"/>
    
    
      <category term="数学" scheme="http://blog.xrdrsp.pw/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="工具" scheme="http://blog.xrdrsp.pw/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Mathematics</title>
    <link href="http://blog.xrdrsp.pw/2020/01/01/Mathematics/"/>
    <id>http://blog.xrdrsp.pw/2020/01/01/Mathematics/</id>
    <published>2019-12-31T16:00:00.000Z</published>
    <updated>2020-07-23T04:30:25.679Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="https://blog.xrdrsp.pw/index.php/2020/04/09/factorization">高次多项式因式分解</a></li><li><a href="https://blog.xrdrsp.pw/index.php/2020/04/09/equation">高次方程</a></li><li><h2 id="x-2"><a href="#x-2" class="headerlink" title="$x^2$"></a>$x^2$</h2></li></ol><ul><li>$ax^2+bx+c=0(a\neq0),x=\dfrac{-b\pm\sqrt{b^2-4ac}}{2a}$</li><li>$x^2+y^2=r^2(r&gt;0)$</li><li>$\dfrac{x^2}{a^2}+\dfrac{y^2}{b^2}=1(a\geq b,c=\sqrt{a^2-b^2})$</li><li>$\dfrac{x^2}{a^2}-\dfrac{y^2}{b^2}=1(a&lt;b,c=\sqrt{b^2-a^2})$</li><li>$y^2=2px(p&gt;0)$</li><li>$(a\pmb)^2=a^2\pm2ab+b^2$</li><li>$(a+b)(a-b)=a^2-b^2$</li><li>$(a+b+c)^2=a^2+b^2+c^2+2ab+2bc+2ac$</li><li>$a^2+b^2\geq 2ab$</li><li>$\dfrac{a+b}2\geq\sqrt{ab}(a\geq0,b\geq0)$</li></ul><h2 id="x-3"><a href="#x-3" class="headerlink" title="$x^3$"></a>$x^3$</h2><ul><li>$a^3+b^3+c^3-3abc=(a+b+c)(a^2+b^2+c^2-ab-bc-ac)=(a+b+c)[(a-b)^2+(b-c)^2+(c-a)^2]$</li><li>$(a\pm b)^3=a^3\pm3a^2b+3ab^2\pm b^3$</li><li>$a^3\pm b^3=(a\pm b)(a^2\mp ab+b^2)$</li></ul><h2 id="x-n"><a href="#x-n" class="headerlink" title="$x^n$"></a>$x^n$</h2><ul><li>$a^n-b^n=(a-b)(a^{n-1}+a^{n-2}b+…+a^{n-k}b^k+…+b^{n-1})$</li><li>$a^{2n+1}+b^{2n+1}=(a+b)[a^{2n}-a^{2n-1}b+…+(-1)^ka^{n-k}b^k+…+b^{2n}]$</li><li>$(a+b)^n=C_n^0a^n+C_n^1a^{n-1}b+…+C_n^ka^{n-k}b^k+…+C_n^nb^n$</li><li>$(a-b)^n=C_n^0a^n-C_n^1a^{n-1}b+…+(-1)^kC_n^ka^{n-k}b^k+…+(-1)^nC_n^nb^n$</li></ul><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><ul><li>$\sin a\csc a=1$</li><li>$\cos a\sec a=1$</li><li>$\tan a\cot a=1$</li><li>$\dfrac{\sin a}{\cos a}=\tan a$</li><li>$\sin^2a+\cos^2a=1$</li><li>$\tan^2a+1=\sec^2a$</li><li>$\cot^2a+1=\csc^2a$</li><li>$\cos(a\pm b)=\cos a\cos b\mp\sin a\sin b$</li><li>$\sin(a\pm b)=\sin a\cos b\pm\cos a\sin b$</li><li>$\tan(a\pm b)=\dfrac{\tan a\pm\tan b}{1\mp\tan a\tan b}$</li><li>$\cos2a=\cos^2a-\sin^2a=1-2\sin^2a=2\cos^2a-1$</li><li>$\sin2a=2\sin a\cos a$</li><li>$\tan2a=\dfrac{2\tan a}{1-\tan^2a}$</li><li>$\sin a+\sin b=2\sin\dfrac{a+b}2\cos\dfrac{a-b}2$</li><li>$\sin a-\sin b=2\cos\dfrac{a+b}2\sin\dfrac{a-b}2$</li><li>$\cos a+\cos b=2\cos\dfrac{a+b}2\cos\dfrac{a-b}2$</li><li>$\cos a-\cos b=-2\sin\dfrac{a+b}2\sin\dfrac{a-b}2$</li><li>$\sin a\cos b=\dfrac12[\sin(a+b)+\sin(a-b)]$</li><li>$\cos a\cos b=\dfrac12[\cos(a+b)+\cos(a-b)]$</li><li>$\sin a\sin b=\dfrac12[\cos(a+b)-\cos(a-b)]$</li><li>$\sin3a=3\sin a-4\sin^3a$</li><li>$\cos3a=4\cos^3a-3\cos a$</li><li>$\tan3a=\dfrac{3\tan a-\tan^3a}{1-\tan^2a}$</li><li>$\dfrac a{\sin A}=\dfrac b{\sin B}=\dfrac c{\sin C}=2R$</li><li>$c^2=a^2+b^2-2ab\cos C$</li></ul><h2 id="极限及微积分"><a href="#极限及微积分" class="headerlink" title="极限及微积分"></a>极限及微积分</h2><ul><li>$\lim \limits_{x \rightarrow0} \dfrac{\sin x}x=1$</li><li>$\lim \limits_{x \rightarrow \infty}(1+ \dfrac 1x)^x=e$</li><li>$\lim \limits_{x \rightarrow x_0} (f(x) \pm g(x))= \lim \limits_{x \rightarrow x_0}f(x) \pm \lim \limits_{x \rightarrow x_0}g(x)$</li><li>$\lim \limits_{x \rightarrow x_0}(f(x)g(x))=\lim \limits_{x \rightarrow x_0}f(x)\times \lim \limits_{x \rightarrow x_0}g(x)$</li><li>$\lim \limits_{x \rightarrow x_0} \dfrac{f(x)}{g(x)}=\dfrac{\lim \limits_{x \rightarrow x_0}f(x)}{\lim \limits_{x \rightarrow x_0}g(x)}(\lim \limits_{x \rightarrow x_0}g(x)\neq0)$</li><li>$\lim \limits_{x \rightarrow x_0}f(x)^n=[\lim \limits_{x \rightarrow x_0}f(x)]^n$</li><li>$a’=0$</li><li>$(x^a)’=ax^{a-1}(a\neq0)$</li><li>$(a^x)’=a^x\ln a$</li><li>$(e^x)’=e^x$</li><li>$(\log_ax)’=\dfrac1x\log_ae$</li><li>$(\ln x)’=\dfrac1x$</li><li>$(\sin x)’=\cos x$</li><li>$(\cos x)’=-\sin x$</li><li>$(\tan x)’=\sec^2x$</li><li>$(\cot x)’=-\csc^2x$</li><li>$(\sec x)’=\sec x\tan x$</li><li>$(\csc x)’=-\csc x\cot x$</li><li>$(\arcsin x)’=\dfrac1{\sqrt{1-x^2}}$</li><li>$(\arccos x)’=-\dfrac1{\sqrt{1-x^2}}$</li><li>$(\arctan x)’=\dfrac1{1+x^2}$</li><li>$(\operatorname{arccot}x)’=-\dfrac1{1-x^2}$</li><li>$(f(x)\pm g(x))’=f’(x)\pm g’(x)$</li><li>$(f(x)g(x))’=f’(x)g(x)+f(x)g’(x)$</li><li>$(\dfrac{f(x)}{g(x)})’=\dfrac{f’(x)g(x)-f(x)g’(x)}{g(x)^2}$</li><li>$\int0dx=C$</li><li>$\int adx=ax+C$</li><li>$\int x^adx=\dfrac1{a+1}x^{a+1}+C(a\neq-1)$</li><li>$\int a^xdx=a^x\log_ae+C$</li><li>$\int e^xdx=e^x+C$</li><li>$\int\dfrac1xdx=\ln |x|+C$</li><li>$\int\sin xdx=-\cos x+C$</li><li>$\int\cos xdx=\sin x+C$</li><li>$\int(f(x)\pm g(x))dx=\int f(x)dx\pm\int g(x)dx$</li></ul><h2 id="级数求和"><a href="#级数求和" class="headerlink" title="级数求和"></a>级数求和</h2><ul><li>$\sum\limits_{n=1}^xn=\dfrac12n(n+1)$</li><li>$\sum\limits_{n=1}^xn^2=\dfrac16n(n+1)(2n+1)$</li><li>$\sum\limits_{n=1}^xn^3=\dfrac14n^2(n+1)^2$</li><li>$\sum\limits_{n=0}^xa^n=\dfrac{a^{x+1}-1}{a-1}$</li><li>$\sum\limits_{n=0}^x2^n=2^{x+1}-1$</li><li>$\sum\limits_{n=1}^\infty\dfrac1{a^n}=\dfrac1{a-1}(|a|&gt;1)$</li><li>$\sum\limits_{n=1}^\infty\dfrac1{2^n}=1$</li><li>$\sum\limits_{n=1}^\infty\dfrac1{n^2}=\dfrac{\pi^2}6$</li><li>$\sum\limits_{n=1}^\infty\dfrac1{n^4}=\dfrac{\pi^4}{90}$</li><li>$\sum\limits_{n=0}^\infty\dfrac{a^n}{n!}=e^a$</li><li>$\sum\limits_{n=0}^\infty\dfrac{(-1)^na^{2n+1}}{(2n+1)!}=\sin a$</li><li>$\sum\limits_{n=0}^\infty\dfrac{(-1)^na^{2n}}{(2n)!}=\cos a$</li></ul><h2 id="平面图形的周长、面积"><a href="#平面图形的周长、面积" class="headerlink" title="平面图形的周长、面积"></a>平面图形的周长、面积</h2><div class="table-container"><table><thead><tr><th style="text-align:left">图形</th><th style="text-align:left">周长</th><th style="text-align:left">面积</th></tr></thead><tbody><tr><td style="text-align:left">长方形</td><td style="text-align:left">$2(a+b)$</td><td style="text-align:left">$ab$</td></tr><tr><td style="text-align:left">正方形</td><td style="text-align:left">$4a$</td><td style="text-align:left">$a^2$</td></tr><tr><td style="text-align:left">圆</td><td style="text-align:left">$2\pi r=\tau r$</td><td style="text-align:left">$\pi r^2=\dfrac12\tau r^2$</td></tr><tr><td style="text-align:left">三角形</td><td style="text-align:left">$a+b+c$</td><td style="text-align:left">$\dfrac12ah_a=\dfrac12ab\sin c=\sqrt{p(p-a)(p-b)(p-c)}=\dfrac12\sqrt{a^2b^2-\left(\dfrac{a^2+b^2-c^2}2\right)^2}$</td></tr><tr><td style="text-align:left">平行四边形</td><td style="text-align:left"></td><td style="text-align:left">$ah$</td></tr><tr><td style="text-align:left">梯形</td><td style="text-align:left"></td><td style="text-align:left">$\dfrac12(a+b)h$</td></tr><tr><td style="text-align:left">正三角形</td><td style="text-align:left">$3a$</td><td style="text-align:left">$\dfrac{\sqrt3}4a^2$</td></tr><tr><td style="text-align:left">正五边形</td><td style="text-align:left">$5a$</td><td style="text-align:left">$\dfrac{\sqrt{25+10\sqrt5}}4a^2$</td></tr><tr><td style="text-align:left">正$n$边形</td><td style="text-align:left">$na$</td><td style="text-align:left">$\dfrac{n\cot(\dfrac{180}n)}4a^2$</td></tr></tbody></table></div><h2 id="立体图形的表面积、体积"><a href="#立体图形的表面积、体积" class="headerlink" title="立体图形的表面积、体积"></a>立体图形的表面积、体积</h2><div class="table-container"><table><thead><tr><th style="text-align:left">图形</th><th style="text-align:left">表面积</th><th style="text-align:left">体积</th></tr></thead><tbody><tr><td style="text-align:left">长方体</td><td style="text-align:left">$2(ab+ah+bh)$</td><td style="text-align:left">$abh$</td></tr><tr><td style="text-align:left">立方体</td><td style="text-align:left">$6a^2$</td><td style="text-align:left">$a^3$</td></tr><tr><td style="text-align:left">柱体</td><td style="text-align:left"></td><td style="text-align:left">$Sh$</td></tr><tr><td style="text-align:left">锥体</td><td style="text-align:left"></td><td style="text-align:left">$\dfrac13Sh$</td></tr><tr><td style="text-align:left">台体</td><td style="text-align:left"></td><td style="text-align:left">$\dfrac13(S+\sqrt{Ss}+s)h$</td></tr><tr><td style="text-align:left">圆柱</td><td style="text-align:left">$2\pi r(r+h)$</td><td style="text-align:left">$\pi r^2h$</td></tr><tr><td style="text-align:left">圆锥</td><td style="text-align:left">$\pi r(r+l)$</td><td style="text-align:left">$\dfrac13\pi r^2h$</td></tr><tr><td style="text-align:left">圆台</td><td style="text-align:left">$\pi(R^2+r^2+Rl+rl)$</td><td style="text-align:left">$\dfrac13\pi(R^2+Rr+r^2)h$</td></tr><tr><td style="text-align:left">球</td><td style="text-align:left">$4\pi r^2$</td><td style="text-align:left">$\dfrac43\pi r^3$</td></tr></tbody></table></div><h2 id="2-的幂表"><a href="#2-的幂表" class="headerlink" title="$2$的幂表"></a>$2$的幂表</h2><div class="table-container"><table><thead><tr><th style="text-align:right">$n$</th><th style="text-align:right">$2^n$</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">2</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">4</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">8</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">16</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">32</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">64</td></tr><tr><td style="text-align:right">7</td><td style="text-align:right">128</td></tr><tr><td style="text-align:right">8</td><td style="text-align:right">256</td></tr><tr><td style="text-align:right">9</td><td style="text-align:right">512</td></tr><tr><td style="text-align:right">10</td><td style="text-align:right">1024</td></tr><tr><td style="text-align:right">11</td><td style="text-align:right">2048</td></tr><tr><td style="text-align:right">12</td><td style="text-align:right">4096</td></tr><tr><td style="text-align:right">13</td><td style="text-align:right">8192</td></tr><tr><td style="text-align:right">14</td><td style="text-align:right">16384</td></tr><tr><td style="text-align:right">15</td><td style="text-align:right">32768</td></tr><tr><td style="text-align:right">16</td><td style="text-align:right">65536</td></tr><tr><td style="text-align:right">17</td><td style="text-align:right">131072</td></tr><tr><td style="text-align:right">18</td><td style="text-align:right">262144</td></tr><tr><td style="text-align:right">19</td><td style="text-align:right">524288</td></tr><tr><td style="text-align:right">20</td><td style="text-align:right">1048576</td></tr><tr><td style="text-align:right">21</td><td style="text-align:right">2097152</td></tr><tr><td style="text-align:right">22</td><td style="text-align:right">4184304</td></tr><tr><td style="text-align:right">23</td><td style="text-align:right">8388638</td></tr><tr><td style="text-align:right">24</td><td style="text-align:right">16777216</td></tr><tr><td style="text-align:right">25</td><td style="text-align:right">33554432</td></tr><tr><td style="text-align:right">26</td><td style="text-align:right">67108864</td></tr><tr><td style="text-align:right">27</td><td style="text-align:right">134217728</td></tr><tr><td style="text-align:right">28</td><td style="text-align:right">268435456</td></tr><tr><td style="text-align:right">29</td><td style="text-align:right">536870912</td></tr><tr><td style="text-align:right">30</td><td style="text-align:right">1073741824</td></tr><tr><td style="text-align:right">31</td><td style="text-align:right">2147483648</td></tr><tr><td style="text-align:right">32</td><td style="text-align:right">4294967296</td></tr><tr><td style="text-align:right">33</td><td style="text-align:right">8589934592</td></tr><tr><td style="text-align:right">34</td><td style="text-align:right">17179869184</td></tr><tr><td style="text-align:right">35</td><td style="text-align:right">34359738368</td></tr><tr><td style="text-align:right">36</td><td style="text-align:right">68719476736</td></tr><tr><td style="text-align:right">37</td><td style="text-align:right">137438953472</td></tr><tr><td style="text-align:right">38</td><td style="text-align:right">274877906944</td></tr><tr><td style="text-align:right">39</td><td style="text-align:right">549755813888</td></tr><tr><td style="text-align:right">40</td><td style="text-align:right">1099511627776</td></tr><tr><td style="text-align:right">41</td><td style="text-align:right">2199023255552</td></tr><tr><td style="text-align:right">42</td><td style="text-align:right">4398046511104</td></tr><tr><td style="text-align:right">43</td><td style="text-align:right">8796093022208</td></tr><tr><td style="text-align:right">44</td><td style="text-align:right">17592186044416</td></tr><tr><td style="text-align:right">45</td><td style="text-align:right">35184372088832</td></tr><tr><td style="text-align:right">46</td><td style="text-align:right">70368744177664</td></tr><tr><td style="text-align:right">47</td><td style="text-align:right">140737488355328</td></tr><tr><td style="text-align:right">48</td><td style="text-align:right">281474976710656</td></tr><tr><td style="text-align:right">49</td><td style="text-align:right">562949953421312</td></tr><tr><td style="text-align:right">50</td><td style="text-align:right">1125899906842624</td></tr><tr><td style="text-align:right">51</td><td style="text-align:right">2251799813685248</td></tr><tr><td style="text-align:right">52</td><td style="text-align:right">4503599627370496</td></tr><tr><td style="text-align:right">53</td><td style="text-align:right">9007199254740992</td></tr><tr><td style="text-align:right">54</td><td style="text-align:right">18014398509481984</td></tr><tr><td style="text-align:right">55</td><td style="text-align:right">36028797018963968</td></tr><tr><td style="text-align:right">56</td><td style="text-align:right">72057594037927936</td></tr><tr><td style="text-align:right">57</td><td style="text-align:right">144115188075855872</td></tr><tr><td style="text-align:right">58</td><td style="text-align:right">288230376151711744</td></tr><tr><td style="text-align:right">59</td><td style="text-align:right">576460752303423488</td></tr><tr><td style="text-align:right">60</td><td style="text-align:right">1152921504606846976</td></tr><tr><td style="text-align:right">61</td><td style="text-align:right">2305843009213693952</td></tr><tr><td style="text-align:right">62</td><td style="text-align:right">4611686018427387904</td></tr><tr><td style="text-align:right">63</td><td style="text-align:right">9223372036854775808</td></tr><tr><td style="text-align:right">64</td><td style="text-align:right">18446744073709551616</td></tr></tbody></table></div><h2 id="3-的幂表"><a href="#3-的幂表" class="headerlink" title="$3$的幂表"></a>$3$的幂表</h2><div class="table-container"><table><thead><tr><th style="text-align:right">$n$</th><th style="text-align:right">$3^n$</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">9</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">27</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">81</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">243</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">729</td></tr><tr><td style="text-align:right">7</td><td style="text-align:right">2187</td></tr><tr><td style="text-align:right">8</td><td style="text-align:right">6561</td></tr><tr><td style="text-align:right">9</td><td style="text-align:right">19683</td></tr><tr><td style="text-align:right">10</td><td style="text-align:right">59049</td></tr></tbody></table></div><h2 id="5-的幂表"><a href="#5-的幂表" class="headerlink" title="$5$的幂表"></a>$5$的幂表</h2><div class="table-container"><table><thead><tr><th style="text-align:right">$n$</th><th style="text-align:right">$5^n$</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">5</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">25</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">125</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">625</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">3125</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">15625</td></tr><tr><td style="text-align:right">7</td><td style="text-align:right">78125</td></tr><tr><td style="text-align:right">8</td><td style="text-align:right">390625</td></tr><tr><td style="text-align:right">9</td><td style="text-align:right">1953125</td></tr><tr><td style="text-align:right">10</td><td style="text-align:right">9765625</td></tr></tbody></table></div><h2 id="常数"><a href="#常数" class="headerlink" title="常数"></a>常数</h2><h3 id="pi"><a href="#pi" class="headerlink" title="$\pi$"></a>$\pi$</h3><p>$\pi \approx 3. \\<br>1415926535  \ 8979323846 \ 2643383279 \ 5028841971 \ 6939937510\\<br>5820974944 \ 5923078164 \ 0628620899 \ 8628034825 \ 3421170679\\<br>8214808651 \ 3282306647 \ 0938446095 \ 5058223172 \ 5359408128\\<br>4811174502 \ 8410270193 \ 8521105559 \ 6446229489 \ 5493038196\\<br>4428810975 \ 6659334461 \ 2847564823 \ 3786783165 \ 2712019091\\<br>4564856692 \ 3460348610 \ 4543266482 \ 1339360726 \ 0249141273\\<br>7245870066 \ 0631558817 \ 4881520920 \ 9628292540 \ 9171536436\\<br>7892590360 \ 0113305305 \ 4882046652 \ 1384146951 \ 9415116094\\<br>3305727036 \ 5759591953 \ 0921861173 \ 8193261179 \ 3105118548\\<br>0744623799 \ 6274956735 \ 1885752724 \ 8912279381 \ 8301194912\\<br>9833673362 \ 4406566430 \ 8602139494 \ 6395224737 \ 1907021798\\<br>6094370277 \ 0539217176 \ 2931767523 \ 8467481846 \ 7669405132\\<br>0005681271 \ 4526356082 \ 7785771342 \ 7577896091 \ 7363717872\\<br>1468440901 \ 2249534301 \ 4654958537 \ 1050792279 \ 6892589235\\<br>4201995611 \ 2129021960 \ 8640344181 \ 5981362977 \ 4771309960\\<br>5187072113 \ 4999999837 \ 2978049951 \ 0597317328 \ 1609631859\\<br>5024459455 \ 3469083026 \ 4252230825 \ 3344685035 \ 2619311881\\<br>7101000313 \ 7838752886 \ 5875332083 \ 8142061717 \ 7669147303\\<br>5982534904 \ 2875546873 \ 1159562863 \ 8823537875 \ 9375195778\\<br>1857780532 \ 1712268066 \ 1300192787 \ 6611195909 \ 2164201989$</p><h3 id="tau"><a href="#tau" class="headerlink" title="$\tau$"></a>$\tau$</h3><p>$\tau\approx6.\\<br>2831853071 \ 7958647692 \ 5286766559 \ 0057683943 \ 3879875021\\<br>1641949889 \ 1846156328 \ 1257241799 \ 7256069650 \ 6842341359\\<br>6429617302 \ 6564613294 \ 1876892191 \ 0116446345 \ 0718816256\\<br>9622349005 \ 6820540387 \ 7042211119 \ 2892458979 \ 0986076392\\<br>8857621951 \ 3318668922 \ 5695129646 \ 7573566330 \ 5424038182\\<br>9129713384 \ 6920697220 \ 9086532964 \ 2678721452 \ 0498282547\\<br>4491740132 \ 1263117634 \ 9763041841 \ 9256585081 \ 8343072873\\<br>5785180720 \ 0226610610 \ 9764093304 \ 2768293903 \ 8830232188\\<br>6611454073 \ 1519183906 \ 1843722347 \ 6386522358 \ 6210237096\\<br>1489247599 \ 2549913470 \ 3771505449 \ 7824558763 \ 6602389825\\<br>9667346724 \ 8813132861 \ 7204278989 \ 2790449474 \ 3814043597\\<br>2188740554 \ 1078434352 \ 5863535047 \ 6934963693 \ 5338810264\\<br>0011362542 \ 9052712165 \ 5571542685 \ 5155792183 \ 4727435744\\<br>2936881802 \ 4499068602 \ 9309917074 \ 2101584559 \ 3785178470\\<br>8403991222 \ 4258043921 \ 7280688363 \ 1962725954 \ 9542619921\\<br>0374144226 \ 9999999674 \ 5956099902 \ 1194634656 \ 3219263719\\<br>0048918910 \ 6938166052 \ 8504461650 \ 6689370070 \ 5238623763\\<br>4202000627 \ 5677505773 \ 1750664167 \ 6284123435 \ 5338294607\\<br>1965069808 \ 5751093746 \ 2319125727 \ 7647075751 \ 8750391556\\<br>3715561064 \ 3424536132 \ 2600385575 \ 3222391818 \ 4328403978$</p><h3 id="e"><a href="#e" class="headerlink" title="$e$"></a>$e$</h3><p>$e\approx2.\\<br>7182818284 \ 5904523536 \ 0287471352 \ 6624977572 \ 4709369995\\<br>9574966967 \ 6277240766 \ 3035354759 \ 4571382178 \ 5251664274\\<br>2746639193 \ 2003059921 \ 8174135966 \ 2904357290 \ 0334295260\\<br>5956307381 \ 3232862794 \ 3490763233 \ 8298807531 \ 9525101901\\<br>1573834187 \ 9307021540 \ 8914993488 \ 4167509244 \ 7614606680\\<br>8226480016 \ 8477411853 \ 7423454424 \ 3710753907 \ 7744992069\\<br>5517027618 \ 3860626133 \ 1384583000 \ 7520449338 \ 2656029760\\<br>6737113200 \ 7093287091 \ 2744374704 \ 7230696977 \ 2093101416\\<br>9283681902 \ 5515108657 \ 4637721112 \ 5238978442 \ 5056953696\\<br>7707854499 \ 6996794686 \ 4454905987 \ 9316368892 \ 3009879312\\<br>7736178215 \ 4249992295 \ 7635148220 \ 8269895193 \ 6680331825\\<br>2886939849 \ 6465105820 \ 9392398294 \ 8879332036 \ 2509443117\\<br>3012381970 \ 6841614039 \ 7019837679 \ 3206832823 \ 7646480429\\<br>5311802328 \ 7825098194 \ 5581530175 \ 6717361332 \ 0698112509\\<br>9618188159 \ 3041690351 \ 5988885193 \ 4580727386 \ 6738589422\\<br>8792284998 \ 9208680582 \ 5749279610 \ 4841984443 \ 6346324496\\<br>8487560233 \ 6248270419 \ 7862320900 \ 2160990235 \ 3043699418\\<br>4914631409 \ 3431738143 \ 6405462531 \ 5209618369 \ 0888707016\\<br>7683964243 \ 7814059271 \ 4563549061 \ 3031072085 \ 1038375051\\<br>0115747704 \ 1718986106 \ 8739696552 \ 1267154688 \ 9570350354$</p><h3 id="Ð"><a href="#Ð" class="headerlink" title="$Ð$"></a>$Ð$</h3><p>$Ð\approx0.\\<br>5840100488 \ 0478917102 \ 6249167135 \ 5734883056 \ 6908655081\\<br>9281784197 \ 9107908364 \ 5819149637 \ 2089369026 \ 1711409559\\<br>8621679226 \ 7152527586 \ 6935894686 \ 2618252825 \ 4561281924\\<br>9647991571 \ 1991841866 \ 9863599724 \ 5221416574 \ 4205050207\\<br>7784686934 \ 5390733422 \ 5050978540 \ 5274496866 \ 4095158612\\<br>7583776330 \ 9458526519 \ 9627816965 \ 9131567494 \ 8719351465\\<br>2455794583 \ 7982911446 \ 4$</p><h2 id="三角函数表"><a href="#三角函数表" class="headerlink" title="三角函数表"></a>三角函数表</h2><div class="table-container"><table><thead><tr><th style="text-align:left">$\theta$</th><th style="text-align:left">$\sin\theta$</th><th style="text-align:left">$\cos\theta$</th><th style="text-align:left">$\tan\theta$</th></tr></thead><tbody><tr><td style="text-align:left">$0$</td><td style="text-align:left">$0$</td><td style="text-align:left">$1$</td><td style="text-align:left">$0$</td></tr><tr><td style="text-align:left">$15$</td><td style="text-align:left">$\dfrac{\sqrt6-\sqrt2}4$</td><td style="text-align:left">$\dfrac{\sqrt6+\sqrt2}4$</td><td style="text-align:left">$2-\sqrt3$</td></tr><tr><td style="text-align:left">$18$</td><td style="text-align:left">$\dfrac{\sqrt5-1}4$</td><td style="text-align:left">$\dfrac{\sqrt{10+2\sqrt5}}4$</td><td style="text-align:left">$\dfrac{\sqrt{25-10\sqrt5}}5$</td></tr><tr><td style="text-align:left">$22.5$</td><td style="text-align:left">$\dfrac{\sqrt{2-\sqrt2}}2$</td><td style="text-align:left">$\dfrac{\sqrt{2+\sqrt2}}2$</td><td style="text-align:left">$\sqrt2-1$</td></tr><tr><td style="text-align:left">$30$</td><td style="text-align:left">$\dfrac12$</td><td style="text-align:left">$\dfrac{\sqrt3}2$</td><td style="text-align:left">$\dfrac{\sqrt3}3$</td></tr><tr><td style="text-align:left">$36$</td><td style="text-align:left">$\dfrac{\sqrt{10-2\sqrt5}}4$</td><td style="text-align:left">$\dfrac{\sqrt5+1}4$</td><td style="text-align:left">$\sqrt{5-2\sqrt5}$</td></tr><tr><td style="text-align:left">$45$</td><td style="text-align:left">$\dfrac{\sqrt2}2$</td><td style="text-align:left">$\dfrac{\sqrt2}2$</td><td style="text-align:left">$1$</td></tr><tr><td style="text-align:left">$54$</td><td style="text-align:left">$\dfrac{\sqrt5+1}4$</td><td style="text-align:left">$\dfrac{\sqrt{10-2\sqrt5}}4$</td><td style="text-align:left">$\dfrac{\sqrt{25+10\sqrt5}}5$</td></tr><tr><td style="text-align:left">$60$</td><td style="text-align:left">$\dfrac{\sqrt3}2$</td><td style="text-align:left">$\dfrac12$</td><td style="text-align:left">$\sqrt3$</td></tr><tr><td style="text-align:left">$67.5$</td><td style="text-align:left">$\dfrac{\sqrt{2+\sqrt2}}2$</td><td style="text-align:left">$\dfrac{\sqrt{2-\sqrt2}}2$</td><td style="text-align:left">$\sqrt2+1$</td></tr><tr><td style="text-align:left">$72$</td><td style="text-align:left">$\dfrac{\sqrt{10+2\sqrt5}}4$</td><td style="text-align:left">$\dfrac{\sqrt5-1}4$</td><td style="text-align:left">$\sqrt{5+2\sqrt5}$</td></tr><tr><td style="text-align:left">$75$</td><td style="text-align:left">$\dfrac{\sqrt6+\sqrt2}4$</td><td style="text-align:left">$\dfrac{\sqrt6-\sqrt2}4$</td><td style="text-align:left">$2+\sqrt3$</td></tr><tr><td style="text-align:left">$90$</td><td style="text-align:left">$1$</td><td style="text-align:left">$0$</td><td style="text-align:left">$\infty$</td></tr></tbody></table></div><p><strong>由于下一张表非常大，所以我在这里提供<a href="http://blog.xrdrsp.pw/files/trigonometric-functions.xlsx">下载链接</a>。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.xrdrsp.pw/index.php/2020/04/09/factorization&quot;&gt;高次多项式因式分解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.xrdrsp.pw/index.ph
      
    
    </summary>
    
    
      <category term="Mathematics" scheme="http://blog.xrdrsp.pw/categories/Mathematics/"/>
    
    
      <category term="数学" scheme="http://blog.xrdrsp.pw/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
